{
  "id": "https://example.com/DH_LinkML",
  "name": "DH_LinkML",
  "description": "The DataHarmonizer template for editing a schema.",
  "version": "1.0.0",
  "in_language": "en",
  "default_prefix": "https://example.com/DH_LinkML/",
  "imports": [],
  "prefixes": {
    "linkml": {
      "prefix_prefix": "linkml",
      "prefix_reference": "https://w3id.org/linkml/"
    },
    "ONTOLOGY": {
      "prefix_prefix": "ONTOLOGY",
      "prefix_reference": "http://purl.obolibrary.org/obo/ONTOLOGY_"
    },
    "xsd": {
      "prefix_prefix": "xsd",
      "prefix_reference": "http://www.w3.org/2001/XMLSchema#"
    },
    "shex": {
      "prefix_prefix": "shex",
      "prefix_reference": "http://www.w3.org/ns/shex#"
    },
    "schema": {
      "prefix_prefix": "schema",
      "prefix_reference": "http://schema.org/"
    }
  },
  "classes": {
    "Schema": {
      "name": "Schema",
      "description": "The top-level description of a LinkML schema.  A schema contains tables (LinkML classes) that detail one or more DataHarmonizer templates, fields/columns, and picklists (which are themselves LinkML classes, slots, and enumerations)",
      "title": "Schema",
      "from_schema": "https://example.com/DH_LinkML",
      "see_also": [
        "templates/schema_editor/SOP.pdf"
      ],
      "slot_usage": {
        "name": {
          "name": "name",
          "description": "The coding name of a LinkML schema.",
          "title": "Name",
          "comments": [
            "This is name formatted in the standard **CamelCase** naming convention.  This format enables software tools to work with it without character processing issues.\nA LinkML schema contains classes for describing one or more tables (LinkML classes), fields/columns (slots), and picklists (enumerations). DataHarmonizer can be set up to display each table on a separate tab.\nA schema can also specify other schemas to import, making their slots, classes, etc. available for reuse."
          ],
          "examples": [
            {
              "value": "Wastewater"
            }
          ],
          "rank": 1,
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "pattern": "^([A-Z][a-z0-9]+)+$"
        },
        "id": {
          "name": "id",
          "rank": 2,
          "slot_group": "key"
        },
        "description": {
          "name": "description",
          "description": "The plain language description of this LinkML schema.",
          "rank": 3,
          "slot_group": "attributes",
          "range": "string",
          "required": true
        },
        "version": {
          "name": "version",
          "description": "The semantic version identifier for this LinkML schema.",
          "comments": [
            "See https://semver.org/"
          ],
          "examples": [
            {
              "value": "1.2.3"
            }
          ],
          "rank": 4,
          "slot_group": "attributes",
          "required": true,
          "pattern": "^\\d+\\.\\d+\\.\\d+$"
        },
        "in_language": {
          "name": "in_language",
          "rank": 5,
          "slot_group": "attributes"
        },
        "locales": {
          "name": "locales",
          "rank": 6,
          "slot_group": "attributes"
        },
        "default_prefix": {
          "name": "default_prefix",
          "rank": 7,
          "slot_group": "attributes"
        },
        "imports": {
          "name": "imports",
          "rank": 8,
          "slot_group": "attributes"
        },
        "see_also": {
          "name": "see_also",
          "description": "A delimited list of URLs to supporting documentation; or possibly a local relative file path containing such information.",
          "rank": 9,
          "slot_group": "attributes"
        }
      },
      "attributes": {
        "name": {
          "name": "name",
          "description": "The coding name of a LinkML schema.",
          "title": "Name",
          "comments": [
            "This is name formatted in the standard **CamelCase** naming convention.  This format enables software tools to work with it without character processing issues.\nA LinkML schema contains classes for describing one or more tables (LinkML classes), fields/columns (slots), and picklists (enumerations). DataHarmonizer can be set up to display each table on a separate tab.\nA schema can also specify other schemas to import, making their slots, classes, etc. available for reuse."
          ],
          "examples": [
            {
              "value": "Wastewater"
            }
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 1,
          "alias": "name",
          "owner": "Schema",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "required": true,
          "pattern": "^([A-Z][a-z0-9]+)+$"
        },
        "id": {
          "name": "id",
          "description": "The unique URI for identifying this LinkML schema.",
          "title": "ID",
          "comments": [
            "Typically the schema can be downloaded from this URI, but currently it is often left as an example URI during schema development. This semantic metadata helps in the comparison of datasets."
          ],
          "examples": [
            {
              "value": "https://example.com/GRDI"
            }
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 2,
          "identifier": true,
          "alias": "id",
          "owner": "Schema",
          "domain_of": [
            "Schema"
          ],
          "slot_group": "key",
          "range": "uri",
          "required": true
        },
        "description": {
          "name": "description",
          "description": "The plain language description of this LinkML schema.",
          "title": "Description",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 3,
          "alias": "description",
          "owner": "Schema",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Enum",
            "PermissibleValue",
            "Setting",
            "Extension"
          ],
          "slot_group": "attributes",
          "range": "string",
          "required": true
        },
        "version": {
          "name": "version",
          "description": "The semantic version identifier for this LinkML schema.",
          "title": "Version",
          "comments": [
            "See https://semver.org/"
          ],
          "examples": [
            {
              "value": "1.2.3"
            }
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 4,
          "alias": "version",
          "owner": "Schema",
          "domain_of": [
            "Schema",
            "Class",
            "Slot"
          ],
          "slot_group": "attributes",
          "range": "WhitespaceMinimizedString",
          "required": true,
          "pattern": "^\\d+\\.\\d+\\.\\d+$"
        },
        "in_language": {
          "name": "in_language",
          "description": "This is the default language (ISO 639-1 Code) that the schema’s table, field and picklist (LinkML class, slot, and enumeration) titles, descriptions and other textual items are in.",
          "title": "Default language",
          "comments": [
            "This is often “en” for English."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 5,
          "alias": "in_language",
          "owner": "Schema",
          "domain_of": [
            "Schema"
          ],
          "slot_group": "attributes",
          "range": "LanguagesMenu"
        },
        "locales": {
          "name": "locales",
          "description": "For multilingual schemas, a list of (ISO 639-1) languages (codes) which translations can be provided for.",
          "title": "Translations",
          "comments": [
            "Language translations are held in the schema’s extensions.locales data structure."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 6,
          "alias": "locales",
          "owner": "Schema",
          "domain_of": [
            "Schema"
          ],
          "slot_group": "attributes",
          "range": "LanguagesMenu",
          "multivalued": true
        },
        "default_prefix": {
          "name": "default_prefix",
          "description": "A prefix to assume all classes and slots can be addressed by.",
          "title": "Default prefix",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 7,
          "alias": "default_prefix",
          "owner": "Schema",
          "domain_of": [
            "Schema"
          ],
          "slot_group": "attributes",
          "range": "uri",
          "required": true
        },
        "imports": {
          "name": "imports",
          "description": "A list of linkml:[import name] schemas to import and reuse.",
          "title": "Imports",
          "comments": [
            "Currently only the default linkml:types is implemented."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 8,
          "alias": "imports",
          "owner": "Schema",
          "domain_of": [
            "Schema"
          ],
          "slot_group": "attributes",
          "range": "WhitespaceMinimizedString",
          "multivalued": true
        },
        "see_also": {
          "name": "see_also",
          "description": "A delimited list of URLs to supporting documentation; or possibly a local relative file path containing such information.",
          "title": "See Also",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 9,
          "alias": "see_also",
          "owner": "Schema",
          "domain_of": [
            "Schema",
            "Class"
          ],
          "slot_group": "attributes",
          "range": "WhitespaceMinimizedString",
          "multivalued": true
        }
      },
      "unique_keys": {
        "schema_key": {
          "unique_key_name": "schema_key",
          "unique_key_slots": [
            "name"
          ],
          "description": "A slot is uniquely identified by the schema it appears in as well as its name"
        }
      }
    },
    "Prefix": {
      "name": "Prefix",
      "description": "A prefix used in the URIs mentioned in this schema.",
      "title": "Prefix",
      "from_schema": "https://example.com/DH_LinkML",
      "slot_usage": {
        "schema_id": {
          "name": "schema_id",
          "description": "The coding name of the LinkML schema this prefix is listed in.",
          "title": "Schema",
          "rank": 1,
          "slot_group": "key",
          "range": "Schema"
        },
        "prefix": {
          "name": "prefix",
          "rank": 2,
          "slot_group": "key"
        },
        "reference": {
          "name": "reference",
          "rank": 3,
          "slot_group": "attributes"
        }
      },
      "attributes": {
        "schema_id": {
          "name": "schema_id",
          "annotations": {
            "foreign_key": {
              "tag": "foreign_key",
              "value": "Schema.name"
            }
          },
          "description": "The coding name of the LinkML schema this prefix is listed in.",
          "title": "Schema",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 1,
          "alias": "schema_id",
          "owner": "Prefix",
          "domain_of": [
            "Prefix",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "PermissibleValue",
            "EnumSource",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "Schema",
          "required": true
        },
        "prefix": {
          "name": "prefix",
          "description": "The namespace prefix string.",
          "title": "Prefix",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 2,
          "alias": "prefix",
          "owner": "Prefix",
          "domain_of": [
            "Prefix"
          ],
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "required": true
        },
        "reference": {
          "name": "reference",
          "description": "The URI the prefix expands to.",
          "title": "Reference",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 3,
          "alias": "reference",
          "owner": "Prefix",
          "domain_of": [
            "Prefix"
          ],
          "slot_group": "attributes",
          "range": "uri",
          "required": true
        }
      },
      "unique_keys": {
        "prefix_key": {
          "unique_key_name": "prefix_key",
          "unique_key_slots": [
            "schema_id",
            "prefix"
          ],
          "description": "A slot is uniquely identified by the schema it appears in as well as its name"
        }
      }
    },
    "Class": {
      "name": "Class",
      "description": "A table (LinkML class) specification contained in given schema.  A table may be a top-level DataHarmonizer \"template\" that can be displayed in a spreadsheet tab, or it may be a subordinate 1-many table linked to a parent table by a primary key field.",
      "title": "Table",
      "from_schema": "https://example.com/DH_LinkML",
      "slot_usage": {
        "schema_id": {
          "name": "schema_id",
          "description": "The coding name of the LinkML schema this table (LinkML class) is contained in.",
          "title": "Schema",
          "rank": 1,
          "slot_group": "key",
          "range": "Schema"
        },
        "name": {
          "name": "name",
          "description": "The coding name of this table (LinkML class).",
          "title": "Name",
          "comments": [
            "This is name formatted in the standard **CamelCase** naming convention.  This format enables software tools to work with it without character processing issues.\nEach table can be displayed in DataHarmonizer in a spreadsheet tab. A table may be visible as a top-level DataHarmonizer template\", or it may be a subordinate 1-many table linked to a parent table by a primary key field."
          ],
          "examples": [
            {
              "value": "WastewaterAMR|WastewaterPathogenAgnostic"
            }
          ],
          "rank": 2,
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "pattern": "^([A-Z]+[a-z0-9]*)+$"
        },
        "title": {
          "name": "title",
          "description": "The plain language name of this table (LinkML class).",
          "title": "Title",
          "rank": 3,
          "slot_group": "attributes",
          "required": true
        },
        "description": {
          "name": "description",
          "description": "The plain language description of this table (LinkML class).",
          "rank": 4,
          "slot_group": "attributes",
          "range": "string",
          "required": true
        },
        "version": {
          "name": "version",
          "description": "A semantic version identifier for this table content.",
          "comments": [
            "See https://semver.org/"
          ],
          "rank": 5,
          "slot_group": "attributes",
          "pattern": "^\\d+\\.\\d+\\.\\d+$"
        },
        "see_also": {
          "name": "see_also",
          "description": "A delimited list of URLs to supporting documentation; or possibly a local file path containing such information.",
          "rank": 6,
          "slot_group": "attributes"
        },
        "class_uri": {
          "name": "class_uri",
          "rank": 7,
          "slot_group": "technical"
        },
        "is_a": {
          "name": "is_a",
          "description": "A parent table (LinkML class) that this table inherits attributes from.",
          "title": "Is a",
          "rank": 8,
          "slot_group": "technical",
          "range": "SchemaClassMenu"
        },
        "tree_root": {
          "name": "tree_root",
          "rank": 9,
          "slot_group": "technical"
        }
      },
      "attributes": {
        "schema_id": {
          "name": "schema_id",
          "annotations": {
            "foreign_key": {
              "tag": "foreign_key",
              "value": "Schema.name"
            }
          },
          "description": "The coding name of the LinkML schema this table (LinkML class) is contained in.",
          "title": "Schema",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 1,
          "alias": "schema_id",
          "owner": "Class",
          "domain_of": [
            "Prefix",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "PermissibleValue",
            "EnumSource",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "Schema",
          "required": true
        },
        "name": {
          "name": "name",
          "description": "The coding name of this table (LinkML class).",
          "title": "Name",
          "comments": [
            "This is name formatted in the standard **CamelCase** naming convention.  This format enables software tools to work with it without character processing issues.\nEach table can be displayed in DataHarmonizer in a spreadsheet tab. A table may be visible as a top-level DataHarmonizer template\", or it may be a subordinate 1-many table linked to a parent table by a primary key field."
          ],
          "examples": [
            {
              "value": "WastewaterAMR|WastewaterPathogenAgnostic"
            }
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 2,
          "alias": "name",
          "owner": "Class",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "required": true,
          "pattern": "^([A-Z]+[a-z0-9]*)+$"
        },
        "title": {
          "name": "title",
          "description": "The plain language name of this table (LinkML class).",
          "title": "Title",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 3,
          "alias": "title",
          "owner": "Class",
          "domain_of": [
            "Class",
            "Slot",
            "Enum",
            "PermissibleValue"
          ],
          "slot_group": "attributes",
          "range": "WhitespaceMinimizedString",
          "required": true
        },
        "description": {
          "name": "description",
          "description": "The plain language description of this table (LinkML class).",
          "title": "Description",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 4,
          "alias": "description",
          "owner": "Class",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Enum",
            "PermissibleValue",
            "Setting",
            "Extension"
          ],
          "slot_group": "attributes",
          "range": "string",
          "required": true
        },
        "version": {
          "name": "version",
          "description": "A semantic version identifier for this table content.",
          "title": "Version",
          "comments": [
            "See https://semver.org/"
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 5,
          "alias": "version",
          "owner": "Class",
          "domain_of": [
            "Schema",
            "Class",
            "Slot"
          ],
          "slot_group": "attributes",
          "range": "WhitespaceMinimizedString",
          "pattern": "^\\d+\\.\\d+\\.\\d+$"
        },
        "see_also": {
          "name": "see_also",
          "description": "A delimited list of URLs to supporting documentation; or possibly a local file path containing such information.",
          "title": "See Also",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 6,
          "alias": "see_also",
          "owner": "Class",
          "domain_of": [
            "Schema",
            "Class"
          ],
          "slot_group": "attributes",
          "range": "WhitespaceMinimizedString",
          "multivalued": true
        },
        "class_uri": {
          "name": "class_uri",
          "description": "A URI for identifying this table's semantic type.",
          "title": "Table URI",
          "comments": [
            "This semantic metadata helps in the comparison of datasets."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 7,
          "alias": "class_uri",
          "owner": "Class",
          "domain_of": [
            "Class"
          ],
          "slot_group": "technical",
          "range": "uri"
        },
        "is_a": {
          "name": "is_a",
          "description": "A parent table (LinkML class) that this table inherits attributes from.",
          "title": "Is a",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 8,
          "alias": "is_a",
          "owner": "Class",
          "domain_of": [
            "Class",
            "PermissibleValue"
          ],
          "slot_group": "technical",
          "range": "SchemaClassMenu"
        },
        "tree_root": {
          "name": "tree_root",
          "description": "A boolean indicating whether this is a specification for a top-level data container on which serializations are based.",
          "title": "Root Table",
          "comments": [
            "Only one allowed per Schema. See https://linkml.io/linkml/data/csvs.html"
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 9,
          "alias": "tree_root",
          "owner": "Class",
          "domain_of": [
            "Class"
          ],
          "slot_group": "technical",
          "any_of": [
            {
              "range": "boolean"
            },
            {
              "range": "TrueFalseMenu"
            }
          ]
        }
      },
      "unique_keys": {
        "class_key": {
          "unique_key_name": "class_key",
          "unique_key_slots": [
            "schema_id",
            "name"
          ],
          "description": "A class is uniquely identified by the schema it appears in as well as its name."
        }
      }
    },
    "UniqueKey": {
      "name": "UniqueKey",
      "description": "A table linking the name of each multi-component(slot) key to the schema class it appears in.",
      "title": "Table key",
      "from_schema": "https://example.com/DH_LinkML",
      "slot_usage": {
        "schema_id": {
          "name": "schema_id",
          "description": "The coding name of the schema that this unique key is in.",
          "title": "Schema",
          "rank": 1,
          "slot_group": "key",
          "range": "Schema"
        },
        "class_name": {
          "name": "class_name",
          "description": "The coding name of the table (LinkML class) that this unique key is in.",
          "title": "Class",
          "rank": 2,
          "slot_group": "key",
          "required": true
        },
        "name": {
          "name": "name",
          "description": "The coding name of this unique key.",
          "title": "Name",
          "rank": 3,
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "pattern": "^[a-z]+[a-z0-9_]*$"
        },
        "unique_key_slots": {
          "name": "unique_key_slots",
          "rank": 4,
          "slot_group": "technical"
        },
        "description": {
          "name": "description",
          "description": "The description of this unique key combination.",
          "rank": 5,
          "slot_group": "technical",
          "range": "WhitespaceMinimizedString"
        },
        "notes": {
          "name": "notes",
          "description": "Editorial notes about an element intended primarily for internal consumption",
          "rank": 6,
          "slot_group": "technical"
        }
      },
      "attributes": {
        "schema_id": {
          "name": "schema_id",
          "annotations": {
            "foreign_key": {
              "tag": "foreign_key",
              "value": "Schema.name"
            }
          },
          "description": "The coding name of the schema that this unique key is in.",
          "title": "Schema",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 1,
          "alias": "schema_id",
          "owner": "UniqueKey",
          "domain_of": [
            "Prefix",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "PermissibleValue",
            "EnumSource",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "Schema",
          "required": true
        },
        "class_name": {
          "name": "class_name",
          "description": "The coding name of the table (LinkML class) that this unique key is in.",
          "title": "Class",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 2,
          "alias": "class_name",
          "owner": "UniqueKey",
          "domain_of": [
            "UniqueKey",
            "Slot",
            "Annotation"
          ],
          "slot_group": "key",
          "range": "SchemaClassMenu",
          "required": true
        },
        "name": {
          "name": "name",
          "description": "The coding name of this unique key.",
          "title": "Name",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 3,
          "alias": "name",
          "owner": "UniqueKey",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "required": true,
          "pattern": "^[a-z]+[a-z0-9_]*$"
        },
        "unique_key_slots": {
          "name": "unique_key_slots",
          "description": "A list of a table’s fields (LinkML class’s slots) that make up this unique key",
          "title": "Unique key slots",
          "comments": [
            "See https://linkml.io/linkml/schemas/constraints.html"
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 4,
          "alias": "unique_key_slots",
          "owner": "UniqueKey",
          "domain_of": [
            "UniqueKey"
          ],
          "slot_group": "technical",
          "range": "SchemaSlotMenu",
          "required": true,
          "multivalued": true
        },
        "description": {
          "name": "description",
          "description": "The description of this unique key combination.",
          "title": "Description",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 5,
          "alias": "description",
          "owner": "UniqueKey",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Enum",
            "PermissibleValue",
            "Setting",
            "Extension"
          ],
          "slot_group": "technical",
          "range": "WhitespaceMinimizedString"
        },
        "notes": {
          "name": "notes",
          "description": "Editorial notes about an element intended primarily for internal consumption",
          "title": "Notes",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 6,
          "alias": "notes",
          "owner": "UniqueKey",
          "domain_of": [
            "UniqueKey",
            "Slot",
            "PermissibleValue"
          ],
          "slot_group": "technical",
          "range": "WhitespaceMinimizedString"
        }
      },
      "unique_keys": {
        "uniquekey_key": {
          "unique_key_name": "uniquekey_key",
          "unique_key_slots": [
            "schema_id",
            "class_name",
            "name"
          ],
          "description": "A slot is uniquely identified by the schema it appears in as well as its name"
        }
      }
    },
    "Slot": {
      "name": "Slot",
      "description": "One or more fields (LinkML slots) contained in given schema. A field (slot) can be used in one or more table (class) specifications.  A field defines a visible column in a template, and can be a basic number, date, string, picklist (categorical or ordinal), or other single-field datatype.",
      "title": "Field",
      "from_schema": "https://example.com/DH_LinkML",
      "slot_usage": {
        "schema_id": {
          "name": "schema_id",
          "description": "The coding name of the schema that this field (LinkML slot) is contained in.",
          "title": "Schema",
          "comments": [
            "A schema has a list of fields it defines. A schema can also import other schemas' fields."
          ],
          "rank": 1,
          "slot_group": "key",
          "range": "Schema"
        },
        "slot_type": {
          "name": "slot_type",
          "rank": 2,
          "slot_group": "key"
        },
        "class_name": {
          "name": "class_name",
          "description": "If this field definition row (LinkML slot) details a field’s use in a table (LinkML class), provide the table name.",
          "title": "Table reuse",
          "comments": [
            "A table field record may detail custom additions to a schema’s field (slot) definition.  Alternately as an “attribute”, a table field record may be entirely custom, and not reference any schema field (slot) at all."
          ],
          "rank": 3,
          "slot_group": "key"
        },
        "name": {
          "name": "name",
          "description": "The coding name of this field (LinkML slot).",
          "title": "Name",
          "comments": [
            "This name is formatted as a standard lowercase **snake_case** formatted name.\nA field can be used in one or more tables. A field can be shown as a visible datatype column in a spreadsheet (DataHarmonizer template) tab, and can define (in its range attribute) a basic number, date, string, picklist (categorical or ordinal), or other custom datatype.  A slot may also have a range pointing to more complex classes."
          ],
          "rank": 4,
          "slot_group": "key",
          "pattern": "^[a-z]+[a-z0-9_]*$",
          "any_of": [
            {
              "range": "WhitespaceMinimizedString"
            },
            {
              "range": "SchemaSlotMenu"
            }
          ]
        },
        "rank": {
          "name": "rank",
          "rank": 5,
          "slot_group": "table attribute"
        },
        "inlined": {
          "name": "inlined",
          "rank": 6,
          "slot_group": "table attribute"
        },
        "inlined_as_list": {
          "name": "inlined_as_list",
          "rank": 7,
          "slot_group": "table attribute"
        },
        "slot_group": {
          "name": "slot_group",
          "rank": 8,
          "slot_group": "field attribute"
        },
        "slot_uri": {
          "name": "slot_uri",
          "rank": 9,
          "slot_group": "field attribute"
        },
        "title": {
          "name": "title",
          "description": "The plain language name of this field (LinkML slot).",
          "title": "Title",
          "comments": [
            "This can be displayed in applications and documentation."
          ],
          "rank": 10,
          "slot_group": "field attribute",
          "required": true
        },
        "range": {
          "name": "range",
          "rank": 11,
          "slot_group": "field attribute"
        },
        "unit": {
          "name": "unit",
          "rank": 12,
          "slot_group": "field attribute"
        },
        "required": {
          "name": "required",
          "rank": 13,
          "slot_group": "field attribute"
        },
        "recommended": {
          "name": "recommended",
          "rank": 14,
          "slot_group": "field attribute"
        },
        "identifier": {
          "name": "identifier",
          "rank": 15,
          "slot_group": "field attribute"
        },
        "multivalued": {
          "name": "multivalued",
          "rank": 16,
          "slot_group": "field attribute"
        },
        "minimum_value": {
          "name": "minimum_value",
          "rank": 17,
          "slot_group": "field attribute"
        },
        "maximum_value": {
          "name": "maximum_value",
          "rank": 18,
          "slot_group": "field attribute"
        },
        "minimum_cardinality": {
          "name": "minimum_cardinality",
          "rank": 19,
          "slot_group": "field attribute"
        },
        "maximum_cardinality": {
          "name": "maximum_cardinality",
          "rank": 20,
          "slot_group": "field attribute"
        },
        "todos": {
          "name": "todos",
          "rank": 21,
          "slot_group": "field attribute"
        },
        "pattern": {
          "name": "pattern",
          "rank": 22,
          "slot_group": "field attribute"
        },
        "structured_pattern": {
          "name": "structured_pattern",
          "rank": 23,
          "slot_group": "field attribute"
        },
        "ifabsent": {
          "name": "ifabsent",
          "rank": 24,
          "slot_group": "field attribute"
        },
        "equals_expression": {
          "name": "equals_expression",
          "rank": 25,
          "slot_group": "field attribute"
        },
        "aliases": {
          "name": "aliases",
          "rank": 26,
          "slot_group": "metadata"
        },
        "description": {
          "name": "description",
          "description": "A plan text description of this field (LinkML slot).",
          "rank": 27,
          "slot_group": "metadata",
          "range": "string",
          "required": true
        },
        "comments": {
          "name": "comments",
          "rank": 28,
          "slot_group": "metadata"
        },
        "examples": {
          "name": "examples",
          "rank": 29,
          "slot_group": "metadata"
        },
        "exact_mappings": {
          "name": "exact_mappings",
          "description": "A list of one or more Curies or URIs that point to terms that are semantically identical to this field (LinkML slot).",
          "title": "Exact mappings",
          "rank": 30,
          "slot_group": "metadata"
        },
        "version": {
          "name": "version",
          "description": "A version number (or date) indicating when this field (LinkML slot) was introduced.",
          "rank": 31,
          "slot_group": "metadata"
        },
        "notes": {
          "name": "notes",
          "description": "Editorial notes about this field (LinkML slot) intended primarily for internal consumption",
          "rank": 32,
          "slot_group": "metadata"
        }
      },
      "attributes": {
        "schema_id": {
          "name": "schema_id",
          "annotations": {
            "foreign_key": {
              "tag": "foreign_key",
              "value": "Schema.name"
            }
          },
          "description": "The coding name of the schema that this field (LinkML slot) is contained in.",
          "title": "Schema",
          "comments": [
            "A schema has a list of fields it defines. A schema can also import other schemas' fields."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 1,
          "alias": "schema_id",
          "owner": "Slot",
          "domain_of": [
            "Prefix",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "PermissibleValue",
            "EnumSource",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "Schema",
          "required": true
        },
        "slot_type": {
          "name": "slot_type",
          "description": "The type of field (LinkML slot) that this field definition record pertains to: either a schema-level shared field, a schema field reused in a table, or a field only defined in a table.",
          "title": "Type",
          "comments": [
            "In a LinkML schema, a field definition (LinkML slot definition) can exist within one of three contexts:\n1) A field which is defined at the schema level, and which can be shared by more than one table (LinkML class).\n2) A field which a table reuses from its schema's list of fields. Here a table cannot change any schema-defined attributes of the field; it can only add attribute values for empty attributes.  In LinkML such fields and their customized attributes appear in the table's \"slot_usage\" list.\n3) A field which is named only in a given table, and does not appear or inherit any attributes from the schema. (In LinkML such fields appear only in a table’s “attributes” list.)"
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 2,
          "alias": "slot_type",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "key",
          "range": "SchemaSlotTypeMenu",
          "required": true
        },
        "class_name": {
          "name": "class_name",
          "description": "If this field definition row (LinkML slot) details a field’s use in a table (LinkML class), provide the table name.",
          "title": "Table reuse",
          "comments": [
            "A table field record may detail custom additions to a schema’s field (slot) definition.  Alternately as an “attribute”, a table field record may be entirely custom, and not reference any schema field (slot) at all."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 3,
          "alias": "class_name",
          "owner": "Slot",
          "domain_of": [
            "UniqueKey",
            "Slot",
            "Annotation"
          ],
          "slot_group": "key",
          "range": "SchemaClassMenu"
        },
        "name": {
          "name": "name",
          "description": "The coding name of this field (LinkML slot).",
          "title": "Name",
          "comments": [
            "This name is formatted as a standard lowercase **snake_case** formatted name.\nA field can be used in one or more tables. A field can be shown as a visible datatype column in a spreadsheet (DataHarmonizer template) tab, and can define (in its range attribute) a basic number, date, string, picklist (categorical or ordinal), or other custom datatype.  A slot may also have a range pointing to more complex classes."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 4,
          "alias": "name",
          "owner": "Slot",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "required": true,
          "pattern": "^[a-z]+[a-z0-9_]*$",
          "any_of": [
            {
              "range": "WhitespaceMinimizedString"
            },
            {
              "range": "SchemaSlotMenu"
            }
          ]
        },
        "rank": {
          "name": "rank",
          "description": "An integer which sets the order of this field (LinkML slot) relative to the others within a given table.  This is the LinkML rank attribute.",
          "title": "Ordering",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 5,
          "alias": "rank",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "table attribute",
          "range": "integer"
        },
        "inlined": {
          "name": "inlined",
          "description": "Within the context of a JSON table representation, whether a complex (non-literal) field’s (LinkML slot’s) content should be represented directly or just represented by a key to another record.",
          "title": "Inlined",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 6,
          "alias": "inlined",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "table attribute",
          "any_of": [
            {
              "range": "boolean"
            },
            {
              "range": "TrueFalseMenu"
            }
          ]
        },
        "inlined_as_list": {
          "name": "inlined_as_list",
          "description": "Within the context of a JSON table representation, whether a complex (non-literal) field’s (LinkML slot’s) content should be represented directly as a JSON list of items.",
          "title": "Inlined as list",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 7,
          "alias": "inlined_as_list",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "table attribute",
          "any_of": [
            {
              "range": "boolean"
            },
            {
              "range": "TrueFalseMenu"
            }
          ]
        },
        "slot_group": {
          "name": "slot_group",
          "description": "The name of a grouping to place this field (LinkML slot) within during presentation in a table.",
          "title": "Field group",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 8,
          "alias": "slot_group",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "range": "SchemaSlotGroupMenu"
        },
        "slot_uri": {
          "name": "slot_uri",
          "description": "A URI for identifying this field’s (LinkML slot’s) semantic type.",
          "title": "Slot URI",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 9,
          "alias": "slot_uri",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "range": "uri"
        },
        "title": {
          "name": "title",
          "description": "The plain language name of this field (LinkML slot).",
          "title": "Title",
          "comments": [
            "This can be displayed in applications and documentation."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 10,
          "alias": "title",
          "owner": "Slot",
          "domain_of": [
            "Class",
            "Slot",
            "Enum",
            "PermissibleValue"
          ],
          "slot_group": "field attribute",
          "range": "WhitespaceMinimizedString",
          "required": true
        },
        "range": {
          "name": "range",
          "description": "The data type or pick list range or ranges that a field’s (LinkML slot’s) value can be validated by.  If more than one, this appears in the field’s specification as a list of \"any of\" ranges.",
          "title": "Range",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 11,
          "alias": "range",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "required": true,
          "multivalued": true,
          "any_of": [
            {
              "range": "SchemaTypeMenu"
            },
            {
              "range": "SchemaClassMenu"
            },
            {
              "range": "SchemaEnumMenu"
            }
          ]
        },
        "unit": {
          "name": "unit",
          "description": "A unit for a numeric field, expressed in the Unified Code for Units of Measure (UCUM, https://ucum.org/) codes.  A UCUM code can be looked up at https://units-of-measurement.org/",
          "title": "Unit",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 12,
          "alias": "unit",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "range": "WhitespaceMinimizedString"
        },
        "required": {
          "name": "required",
          "description": "A boolean TRUE indicates this field (LinkML slot) is a mandatory data field.",
          "title": "Required",
          "comments": [
            "A mandatory data field will fail validation if empty."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 13,
          "alias": "required",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "any_of": [
            {
              "range": "boolean"
            },
            {
              "range": "TrueFalseMenu"
            }
          ]
        },
        "recommended": {
          "name": "recommended",
          "description": "A boolean TRUE indicates this field (LinkML slot) is a recommended data field.",
          "title": "Recommended",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 14,
          "alias": "recommended",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "any_of": [
            {
              "range": "boolean"
            },
            {
              "range": "TrueFalseMenu"
            }
          ]
        },
        "identifier": {
          "name": "identifier",
          "description": "A boolean TRUE indicates this field (LinkML slot) is an identifier such that each of its row values must be unique within the table.  In LinkML, “If a slot is declared as an identifier then it serves as a unique key for members of that class. It can also be used for inlining as a dict in JSON serializations.”",
          "title": "Identifier",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 15,
          "alias": "identifier",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "any_of": [
            {
              "range": "boolean"
            },
            {
              "range": "TrueFalseMenu"
            }
          ]
        },
        "multivalued": {
          "name": "multivalued",
          "description": "A boolean TRUE indicates this field (LinkML slot) can hold more than one values taken from its range.",
          "title": "Multivalued",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 16,
          "alias": "multivalued",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "any_of": [
            {
              "range": "boolean"
            },
            {
              "range": "TrueFalseMenu"
            }
          ]
        },
        "minimum_value": {
          "name": "minimum_value",
          "description": "A minimum value which is appropriate for the range data type of the field (LinkML slot).",
          "title": "Minimum value",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 17,
          "alias": "minimum_value",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "range": "integer"
        },
        "maximum_value": {
          "name": "maximum_value",
          "description": "A maximum value which is appropriate for the range data type of the field (LinkML slot).",
          "title": "Maximum value",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 18,
          "alias": "maximum_value",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "range": "integer"
        },
        "minimum_cardinality": {
          "name": "minimum_cardinality",
          "description": "For a multivalued field (LinkML slot), a minimum count of values required.",
          "title": "Minimum cardinality",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 19,
          "alias": "minimum_cardinality",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "range": "integer"
        },
        "maximum_cardinality": {
          "name": "maximum_cardinality",
          "description": "For a multivalued field (LinkML slot), a maximum count of values required.",
          "title": "Maximum cardinality",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 20,
          "alias": "maximum_cardinality",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "range": "integer"
        },
        "todos": {
          "name": "todos",
          "description": "A delimited list of simple conditionals that pertain to this field (e.g. ‘<={today}’ , or ‘<={some_other_field_name}’.  This field may also include “work in progress” notes.",
          "title": "Conditional",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 21,
          "alias": "todos",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "range": "WhitespaceMinimizedString",
          "multivalued": true
        },
        "pattern": {
          "name": "pattern",
          "description": "A regular expression pattern used to validate a string field’s (LinkML slot)’s value content.",
          "title": "Pattern",
          "comments": [
            "Regular expressions can begin with ^ to ensure start of string is tested, and $ to ensure up to end is tested."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 22,
          "alias": "pattern",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "range": "WhitespaceMinimizedString"
        },
        "structured_pattern": {
          "name": "structured_pattern",
          "description": "This is a concatenation of regular expression patterns named in the settings table.  Each named expression gets replaced by its regular expression before validating the slot’s string value against it.",
          "title": "Structured pattern",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 23,
          "alias": "structured_pattern",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "range": "WhitespaceMinimizedString"
        },
        "ifabsent": {
          "name": "ifabsent",
          "description": "Specify a default value for a field (LinkML slot) using the syntax shown in the examples.",
          "title": "Default value",
          "examples": [
            {
              "value": "For strings: string(default value)"
            },
            {
              "value": "For integer: int(42)"
            },
            {
              "value": "For float: float(0.5)"
            },
            {
              "value": "For boolean: True"
            },
            {
              "value": "For dates: date(\"2020-01-31\")"
            },
            {
              "value": "For datetime: datetime(\"2020-01-31T12:00:00Z\")"
            }
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 24,
          "alias": "ifabsent",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "range": "WhitespaceMinimizedString"
        },
        "equals_expression": {
          "name": "equals_expression",
          "description": "Enables inferring (calculating) value based on other field (LinkML slot) values. This is a LinkML-script-processed expression, having the syntax of a python expression.",
          "title": "Calculated value",
          "comments": [
            "See https://linkml.io/linkml/schemas/advanced.html#equals-expression"
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 25,
          "alias": "equals_expression",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "field attribute",
          "range": "WhitespaceMinimizedString"
        },
        "aliases": {
          "name": "aliases",
          "description": "A list of other names that slot can be known by.",
          "title": "Aliases",
          "comments": [
            "See https://linkml.io/linkml/schemas/metadata.html#providing-aliases"
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 26,
          "alias": "aliases",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "metadata",
          "range": "WhitespaceMinimizedString",
          "multivalued": true
        },
        "description": {
          "name": "description",
          "description": "A plan text description of this field (LinkML slot).",
          "title": "Description",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 27,
          "alias": "description",
          "owner": "Slot",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Enum",
            "PermissibleValue",
            "Setting",
            "Extension"
          ],
          "slot_group": "metadata",
          "range": "string",
          "required": true
        },
        "comments": {
          "name": "comments",
          "description": "A free text field for adding other comments to guide usage of this field (LinkML slot).",
          "title": "Comments",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 28,
          "alias": "comments",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "metadata",
          "range": "WhitespaceMinimizedString"
        },
        "examples": {
          "name": "examples",
          "description": "A delimited field (LinkML slot) for including examples of string, numeric, date or categorical values.",
          "title": "Examples",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 29,
          "alias": "examples",
          "owner": "Slot",
          "domain_of": [
            "Slot"
          ],
          "slot_group": "metadata",
          "range": "WhitespaceMinimizedString"
        },
        "exact_mappings": {
          "name": "exact_mappings",
          "description": "A list of one or more Curies or URIs that point to terms that are semantically identical to this field (LinkML slot).",
          "title": "Exact mappings",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 30,
          "alias": "exact_mappings",
          "owner": "Slot",
          "domain_of": [
            "Slot",
            "PermissibleValue"
          ],
          "slot_group": "metadata",
          "range": "WhitespaceMinimizedString",
          "multivalued": true
        },
        "version": {
          "name": "version",
          "description": "A version number (or date) indicating when this field (LinkML slot) was introduced.",
          "title": "Version",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 31,
          "alias": "version",
          "owner": "Slot",
          "domain_of": [
            "Schema",
            "Class",
            "Slot"
          ],
          "slot_group": "metadata",
          "range": "WhitespaceMinimizedString"
        },
        "notes": {
          "name": "notes",
          "description": "Editorial notes about this field (LinkML slot) intended primarily for internal consumption",
          "title": "Notes",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 32,
          "alias": "notes",
          "owner": "Slot",
          "domain_of": [
            "UniqueKey",
            "Slot",
            "PermissibleValue"
          ],
          "slot_group": "metadata",
          "range": "WhitespaceMinimizedString"
        }
      },
      "unique_keys": {
        "slot_key": {
          "unique_key_name": "slot_key",
          "unique_key_slots": [
            "schema_id",
            "name",
            "slot_type"
          ],
          "description": "A slot is uniquely identified by the schema it appears in as well as its name"
        }
      }
    },
    "Annotation": {
      "name": "Annotation",
      "description": "One or more fields (LinkML slots) contained in given schema. A field (slot) can be used in one or more table (class) specifications.  A field defines a visible column in a template, and can be a basic number, date, string, picklist (categorical or ordinal), or other single-field datatype.",
      "title": "Annotation",
      "from_schema": "https://example.com/DH_LinkML",
      "slot_usage": {
        "schema_id": {
          "name": "schema_id",
          "description": "The coding name of the schema this annotation is contained in.",
          "title": "Schema",
          "rank": 1,
          "slot_group": "key",
          "range": "Schema"
        },
        "annotation_type": {
          "name": "annotation_type",
          "rank": 2,
          "slot_group": "key"
        },
        "class_name": {
          "name": "class_name",
          "description": "If this annotation is attached to a table (LinkML class), provide the name of the table.",
          "title": "On table",
          "rank": 3,
          "slot_group": "key"
        },
        "slot_name": {
          "name": "slot_name",
          "rank": 4,
          "slot_group": "key"
        },
        "name": {
          "name": "name",
          "description": "The annotation key (i.e. coding name of the annotation).",
          "title": "Key",
          "comments": [
            "This is a lowercase **snake_case** formatted name in the LinkML standard naming convention."
          ],
          "rank": 5,
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "pattern": "^[a-z]+[a-z0-9_]*$"
        },
        "value": {
          "name": "value",
          "description": "The annotation’s value, which can be a string or an object of any kind (in non-serialized data).",
          "rank": 6,
          "slot_group": "attribute"
        }
      },
      "attributes": {
        "schema_id": {
          "name": "schema_id",
          "annotations": {
            "foreign_key": {
              "tag": "foreign_key",
              "value": "Schema.name"
            }
          },
          "description": "The coding name of the schema this annotation is contained in.",
          "title": "Schema",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 1,
          "alias": "schema_id",
          "owner": "Annotation",
          "domain_of": [
            "Prefix",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "PermissibleValue",
            "EnumSource",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "Schema",
          "required": true
        },
        "annotation_type": {
          "name": "annotation_type",
          "description": "A menu of schema element types this annotation could pertain to (Schema, Class, Slot; in future Enumeration …)",
          "title": "Annotation on",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 2,
          "alias": "annotation_type",
          "owner": "Annotation",
          "domain_of": [
            "Annotation"
          ],
          "slot_group": "key",
          "range": "SchemaAnnotationTypeMenu",
          "required": true
        },
        "class_name": {
          "name": "class_name",
          "description": "If this annotation is attached to a table (LinkML class), provide the name of the table.",
          "title": "On table",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 3,
          "alias": "class_name",
          "owner": "Annotation",
          "domain_of": [
            "UniqueKey",
            "Slot",
            "Annotation"
          ],
          "slot_group": "key",
          "range": "SchemaClassMenu"
        },
        "slot_name": {
          "name": "slot_name",
          "description": "If this annotation is attached to a field (LinkML slot), provide the name of the field.",
          "title": "On field",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 4,
          "alias": "slot_name",
          "owner": "Annotation",
          "domain_of": [
            "Annotation"
          ],
          "slot_group": "key",
          "range": "SchemaSlotMenu"
        },
        "name": {
          "name": "name",
          "description": "The annotation key (i.e. coding name of the annotation).",
          "title": "Key",
          "comments": [
            "This is a lowercase **snake_case** formatted name in the LinkML standard naming convention."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 5,
          "alias": "name",
          "owner": "Annotation",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "required": true,
          "pattern": "^[a-z]+[a-z0-9_]*$"
        },
        "value": {
          "name": "value",
          "description": "The annotation’s value, which can be a string or an object of any kind (in non-serialized data).",
          "title": "Value",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 6,
          "alias": "value",
          "owner": "Annotation",
          "domain_of": [
            "Annotation",
            "Setting",
            "Extension"
          ],
          "slot_group": "attribute",
          "range": "string"
        }
      },
      "unique_keys": {
        "slot_key": {
          "unique_key_name": "slot_key",
          "unique_key_slots": [
            "schema_id",
            "name",
            "annotation_type"
          ],
          "description": "A slot is uniquely identified by the schema it appears in as well as its name"
        }
      }
    },
    "Enum": {
      "name": "Enum",
      "description": "One or more enumerations in given schema.  An enumeration can be used in the \"range\" or \"any of\" attribute of a slot.  Each enumeration has a flat list or hierarchy of permitted values.",
      "title": "Picklist",
      "from_schema": "https://example.com/DH_LinkML",
      "slot_usage": {
        "schema_id": {
          "name": "schema_id",
          "description": "The coding name of the schema this pick list (LinkML enum) is contained in.",
          "title": "Schema",
          "rank": 1,
          "slot_group": "key",
          "range": "Schema"
        },
        "name": {
          "name": "name",
          "description": "The coding name of this pick list menu (LinkML enum) of terms..",
          "title": "Name",
          "comments": [
            "See https://linkml.io/linkml/schemas/enums.html and https://linkml.io/linkml-model/latest/docs/EnumDefinition/"
          ],
          "rank": 2,
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "pattern": "^([A-Z]+[a-z0-9]*)+$"
        },
        "title": {
          "name": "title",
          "description": "The plain language name of this pick list menu (LinkML enum) of terms.",
          "title": "Title",
          "rank": 3,
          "slot_group": "attribute",
          "required": true
        },
        "description": {
          "name": "description",
          "description": "A plan text description of this pick list (LinkML enum) menu.",
          "rank": 4,
          "slot_group": "metadata",
          "range": "string"
        },
        "enum_uri": {
          "name": "enum_uri",
          "rank": 5,
          "slot_group": "metadata"
        },
        "inherits": {
          "name": "inherits",
          "rank": 6,
          "slot_group": "metadata"
        }
      },
      "attributes": {
        "schema_id": {
          "name": "schema_id",
          "annotations": {
            "foreign_key": {
              "tag": "foreign_key",
              "value": "Schema.name"
            }
          },
          "description": "The coding name of the schema this pick list (LinkML enum) is contained in.",
          "title": "Schema",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 1,
          "alias": "schema_id",
          "owner": "Enum",
          "domain_of": [
            "Prefix",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "PermissibleValue",
            "EnumSource",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "Schema",
          "required": true
        },
        "name": {
          "name": "name",
          "description": "The coding name of this pick list menu (LinkML enum) of terms..",
          "title": "Name",
          "comments": [
            "See https://linkml.io/linkml/schemas/enums.html and https://linkml.io/linkml-model/latest/docs/EnumDefinition/"
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 2,
          "alias": "name",
          "owner": "Enum",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "required": true,
          "pattern": "^([A-Z]+[a-z0-9]*)+$"
        },
        "title": {
          "name": "title",
          "description": "The plain language name of this pick list menu (LinkML enum) of terms.",
          "title": "Title",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 3,
          "alias": "title",
          "owner": "Enum",
          "domain_of": [
            "Class",
            "Slot",
            "Enum",
            "PermissibleValue"
          ],
          "slot_group": "attribute",
          "range": "WhitespaceMinimizedString",
          "required": true
        },
        "description": {
          "name": "description",
          "description": "A plan text description of this pick list (LinkML enum) menu.",
          "title": "Description",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 4,
          "alias": "description",
          "owner": "Enum",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Enum",
            "PermissibleValue",
            "Setting",
            "Extension"
          ],
          "slot_group": "metadata",
          "range": "string"
        },
        "enum_uri": {
          "name": "enum_uri",
          "description": "A URI for identifying this pick list’s (LinkML enum) semantic type.",
          "title": "Enum URI",
          "comments": [
            "This semantic metadata helps in the comparison of datasets."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 5,
          "alias": "enum_uri",
          "owner": "Enum",
          "domain_of": [
            "Enum"
          ],
          "slot_group": "metadata",
          "range": "uri"
        },
        "inherits": {
          "name": "inherits",
          "description": "Indicates that this menu inherits choices from another menu, and includes or excludes other values (for selection and validation).",
          "title": "Inherits",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 6,
          "alias": "inherits",
          "owner": "Enum",
          "domain_of": [
            "Enum"
          ],
          "slot_group": "metadata",
          "range": "SchemaEnumMenu"
        }
      },
      "unique_keys": {
        "enum_key": {
          "unique_key_name": "enum_key",
          "unique_key_slots": [
            "schema_id",
            "name"
          ],
          "description": "An enumeration is uniquely identified by the schema it appears in as well as its name."
        }
      }
    },
    "PermissibleValue": {
      "name": "PermissibleValue",
      "description": "An enumeration picklist value.",
      "title": "Picklist choices",
      "from_schema": "https://example.com/DH_LinkML",
      "slot_usage": {
        "schema_id": {
          "name": "schema_id",
          "description": "The coding name of the schema this menu choice's menu (LinkML enum) is contained in.",
          "title": "Schema",
          "rank": 1,
          "slot_group": "key",
          "range": "Schema"
        },
        "enum_id": {
          "name": "enum_id",
          "description": "The coding name of the menu (LinkML enum) that this choice is contained in.",
          "title": "Enum",
          "rank": 2,
          "slot_group": "key",
          "range": "Enum"
        },
        "text": {
          "name": "text",
          "rank": 3,
          "slot_group": "key"
        },
        "is_a": {
          "name": "is_a",
          "description": "The parent term code (in the same enumeration) of this choice, if any.",
          "title": "Parent",
          "rank": 4,
          "slot_group": "attribute",
          "range": "WhitespaceMinimizedString"
        },
        "title": {
          "name": "title",
          "description": "The plain language title of this menu choice (LinkML PermissibleValue) to display. If none, the code will be dsplayed.",
          "title": "title",
          "rank": 5,
          "slot_group": "attribute"
        },
        "description": {
          "name": "description",
          "description": "A plan text description of the meaning of this menu choice.",
          "rank": 6,
          "slot_group": "metadata",
          "range": "string"
        },
        "exact_mappings": {
          "name": "exact_mappings",
          "title": "Code mappings",
          "rank": 7,
          "slot_group": "metadata"
        },
        "meaning": {
          "name": "meaning",
          "rank": 8,
          "slot_group": "metadata"
        },
        "notes": {
          "name": "notes",
          "description": "Editorial notes about an element intended primarily for internal consumption",
          "rank": 9,
          "slot_group": "metadata"
        }
      },
      "attributes": {
        "schema_id": {
          "name": "schema_id",
          "annotations": {
            "foreign_key": {
              "tag": "foreign_key",
              "value": "Schema.name"
            }
          },
          "description": "The coding name of the schema this menu choice's menu (LinkML enum) is contained in.",
          "title": "Schema",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 1,
          "alias": "schema_id",
          "owner": "PermissibleValue",
          "domain_of": [
            "Prefix",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "PermissibleValue",
            "EnumSource",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "Schema",
          "required": true
        },
        "enum_id": {
          "name": "enum_id",
          "annotations": {
            "foreign_key": {
              "tag": "foreign_key",
              "value": "Enum.name"
            }
          },
          "description": "The coding name of the menu (LinkML enum) that this choice is contained in.",
          "title": "Enum",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 2,
          "alias": "enum_id",
          "owner": "PermissibleValue",
          "domain_of": [
            "PermissibleValue",
            "EnumSource"
          ],
          "slot_group": "key",
          "range": "Enum",
          "required": true
        },
        "text": {
          "name": "text",
          "description": "The code (LinkML permissible_value key) for the menu item choice.",
          "title": "Code",
          "comments": [
            "A picklist's codes must be unique.  Whether a picklist label or its code is saved in a data file depends on the data file format.  JSON formatted data files hold codes directly, and thus enforce standardization.  CSV, TSV, XLS, and XLSX data formats receive the choice's label.  This enables saving of multilingual data in language of choice."
          ],
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 3,
          "alias": "text",
          "owner": "PermissibleValue",
          "domain_of": [
            "PermissibleValue"
          ],
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "required": true
        },
        "is_a": {
          "name": "is_a",
          "description": "The parent term code (in the same enumeration) of this choice, if any.",
          "title": "Parent",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 4,
          "alias": "is_a",
          "owner": "PermissibleValue",
          "domain_of": [
            "Class",
            "PermissibleValue"
          ],
          "slot_group": "attribute",
          "range": "WhitespaceMinimizedString"
        },
        "title": {
          "name": "title",
          "description": "The plain language title of this menu choice (LinkML PermissibleValue) to display. If none, the code will be dsplayed.",
          "title": "title",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 5,
          "alias": "title",
          "owner": "PermissibleValue",
          "domain_of": [
            "Class",
            "Slot",
            "Enum",
            "PermissibleValue"
          ],
          "slot_group": "attribute",
          "range": "WhitespaceMinimizedString"
        },
        "description": {
          "name": "description",
          "description": "A plan text description of the meaning of this menu choice.",
          "title": "Description",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 6,
          "alias": "description",
          "owner": "PermissibleValue",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Enum",
            "PermissibleValue",
            "Setting",
            "Extension"
          ],
          "slot_group": "metadata",
          "range": "string"
        },
        "exact_mappings": {
          "name": "exact_mappings",
          "title": "Code mappings",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 7,
          "alias": "exact_mappings",
          "owner": "PermissibleValue",
          "domain_of": [
            "Slot",
            "PermissibleValue"
          ],
          "slot_group": "metadata",
          "range": "WhitespaceMinimizedString",
          "multivalued": true
        },
        "meaning": {
          "name": "meaning",
          "description": "A URI for identifying this choice's semantic type.",
          "title": "Meaning",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 8,
          "alias": "meaning",
          "owner": "PermissibleValue",
          "domain_of": [
            "PermissibleValue"
          ],
          "slot_group": "metadata",
          "range": "uri"
        },
        "notes": {
          "name": "notes",
          "description": "Editorial notes about an element intended primarily for internal consumption",
          "title": "Notes",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 9,
          "alias": "notes",
          "owner": "PermissibleValue",
          "domain_of": [
            "UniqueKey",
            "Slot",
            "PermissibleValue"
          ],
          "slot_group": "metadata",
          "range": "WhitespaceMinimizedString"
        }
      },
      "unique_keys": {
        "permissiblevalue_key": {
          "unique_key_name": "permissiblevalue_key",
          "unique_key_slots": [
            "schema_id",
            "enum_id",
            "text"
          ],
          "description": "An enumeration is uniquely identified by the schema it appears in as well as its name."
        }
      }
    },
    "EnumSource": {
      "name": "EnumSource",
      "description": "The external (URI reachable) source of an ontology or other parseable vocabulary that aids in composing this menu.  This includes specifications for extracting nodes or branches for inclusion or exclusion in the picklist (LinkML) enumeration.",
      "title": "Picklist config",
      "from_schema": "https://example.com/DH_LinkML",
      "slot_usage": {
        "schema_id": {
          "name": "schema_id",
          "description": "The coding name of the schema this menu inclusion and exclusion criteria pertain to.",
          "title": "Schema",
          "rank": 1,
          "slot_group": "key",
          "range": "Schema"
        },
        "enum_id": {
          "name": "enum_id",
          "description": "The coding name of the menu (enumeration) that this inclusion criteria pertains to.",
          "title": "Enum",
          "rank": 2,
          "slot_group": "key",
          "range": "Enum"
        },
        "criteria": {
          "name": "criteria",
          "rank": 3,
          "slot_group": "key"
        },
        "source_ontology": {
          "name": "source_ontology",
          "rank": 4,
          "slot_group": "key"
        },
        "is_direct": {
          "name": "is_direct",
          "rank": 5,
          "slot_group": "technical"
        },
        "source_nodes": {
          "name": "source_nodes",
          "rank": 6,
          "slot_group": "technical"
        },
        "include_self": {
          "name": "include_self",
          "rank": 7,
          "slot_group": "technical"
        },
        "relationship_types": {
          "name": "relationship_types",
          "rank": 8,
          "slot_group": "technical"
        }
      },
      "attributes": {
        "schema_id": {
          "name": "schema_id",
          "annotations": {
            "foreign_key": {
              "tag": "foreign_key",
              "value": "Schema.name"
            }
          },
          "description": "The coding name of the schema this menu inclusion and exclusion criteria pertain to.",
          "title": "Schema",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 1,
          "alias": "schema_id",
          "owner": "EnumSource",
          "domain_of": [
            "Prefix",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "PermissibleValue",
            "EnumSource",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "Schema",
          "required": true
        },
        "enum_id": {
          "name": "enum_id",
          "annotations": {
            "foreign_key": {
              "tag": "foreign_key",
              "value": "Enum.name"
            }
          },
          "description": "The coding name of the menu (enumeration) that this inclusion criteria pertains to.",
          "title": "Enum",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 2,
          "alias": "enum_id",
          "owner": "EnumSource",
          "domain_of": [
            "PermissibleValue",
            "EnumSource"
          ],
          "slot_group": "key",
          "range": "Enum",
          "required": true
        },
        "criteria": {
          "name": "criteria",
          "description": "Whether to include or exclude (minus) the source ontology’s given terms (and their underlying terms, if any).",
          "title": "Criteria",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 3,
          "alias": "criteria",
          "owner": "EnumSource",
          "domain_of": [
            "EnumSource"
          ],
          "slot_group": "key",
          "range": "EnumCriteriaMenu",
          "required": true
        },
        "source_ontology": {
          "name": "source_ontology",
          "description": "The URI of the source ontology to trust and fetch terms from.",
          "title": "Source ontology",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 4,
          "alias": "source_ontology",
          "owner": "EnumSource",
          "domain_of": [
            "EnumSource"
          ],
          "slot_group": "key",
          "range": "uri"
        },
        "is_direct": {
          "name": "is_direct",
          "description": "Can the vocabulary source be automatically downloaded and processed, or is a manual process involved?",
          "title": "Directly downloadable",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 5,
          "alias": "is_direct",
          "owner": "EnumSource",
          "domain_of": [
            "EnumSource"
          ],
          "slot_group": "technical",
          "any_of": [
            {
              "range": "boolean"
            },
            {
              "range": "TrueFalseMenu"
            }
          ]
        },
        "source_nodes": {
          "name": "source_nodes",
          "description": "The selection of term nodes (and their underlying terms) to allow or exclude selections from, and to validate data by.",
          "title": "Top level term ids",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 6,
          "alias": "source_nodes",
          "owner": "EnumSource",
          "domain_of": [
            "EnumSource"
          ],
          "slot_group": "technical",
          "range": "uriorcurie",
          "multivalued": true
        },
        "include_self": {
          "name": "include_self",
          "description": "Include the listed selection of items (top of term branch or otherwise) as selectable items themselves.",
          "title": "Include top level terms",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 7,
          "alias": "include_self",
          "owner": "EnumSource",
          "domain_of": [
            "EnumSource"
          ],
          "slot_group": "technical",
          "any_of": [
            {
              "range": "boolean"
            },
            {
              "range": "TrueFalseMenu"
            }
          ]
        },
        "relationship_types": {
          "name": "relationship_types",
          "description": "The relations (usually owl:SubClassOf) that compose the hierarchy of terms.",
          "title": "Relations",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 8,
          "alias": "relationship_types",
          "owner": "EnumSource",
          "domain_of": [
            "EnumSource"
          ],
          "slot_group": "technical",
          "range": "WhitespaceMinimizedString",
          "multivalued": true
        }
      },
      "unique_keys": {
        "enum_source_key": {
          "unique_key_name": "enum_source_key",
          "unique_key_slots": [
            "schema_id",
            "enum_id",
            "criteria",
            "source_ontology"
          ],
          "description": "A picklist source consists of the schema, enumeration, inclusion or exclusion flag, and source URI of the ontology."
        }
      }
    },
    "Setting": {
      "name": "Setting",
      "description": "A regular expression that can be reused in a structured_pattern. See:https://linkml.io/linkml/faq/modeling.html#can-i-reuse-regular-expression-patterns.",
      "title": "Setting",
      "from_schema": "https://example.com/DH_LinkML",
      "slot_usage": {
        "schema_id": {
          "name": "schema_id",
          "description": "The coding name of the schema this setting is contained in.",
          "title": "Schema",
          "rank": 1,
          "slot_group": "key",
          "range": "Schema"
        },
        "name": {
          "name": "name",
          "description": "The coding name of this setting, which I can be referenced in a Linkml structured_pattern expression. See https://linkml.io/linkml/schemas/enums.html and https://linkml.io/linkml-model/latest/docs/EnumDefinition/",
          "title": "Name",
          "rank": 2,
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "pattern": "^([A-Z]+[a-z0-9]*)+$"
        },
        "value": {
          "name": "value",
          "description": "The setting’s value, which is a regular expression that can be used in a LinkML structured_pattern expression field.",
          "rank": 3,
          "slot_group": "attribute",
          "required": true
        },
        "description": {
          "name": "description",
          "description": "A plan text description of this setting.",
          "rank": 4,
          "slot_group": "attribute",
          "range": "string"
        }
      },
      "attributes": {
        "schema_id": {
          "name": "schema_id",
          "annotations": {
            "foreign_key": {
              "tag": "foreign_key",
              "value": "Schema.name"
            }
          },
          "description": "The coding name of the schema this setting is contained in.",
          "title": "Schema",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 1,
          "alias": "schema_id",
          "owner": "Setting",
          "domain_of": [
            "Prefix",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "PermissibleValue",
            "EnumSource",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "Schema",
          "required": true
        },
        "name": {
          "name": "name",
          "description": "The coding name of this setting, which I can be referenced in a Linkml structured_pattern expression. See https://linkml.io/linkml/schemas/enums.html and https://linkml.io/linkml-model/latest/docs/EnumDefinition/",
          "title": "Name",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 2,
          "alias": "name",
          "owner": "Setting",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "required": true,
          "pattern": "^([A-Z]+[a-z0-9]*)+$"
        },
        "value": {
          "name": "value",
          "description": "The setting’s value, which is a regular expression that can be used in a LinkML structured_pattern expression field.",
          "title": "Value",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 3,
          "alias": "value",
          "owner": "Setting",
          "domain_of": [
            "Annotation",
            "Setting",
            "Extension"
          ],
          "slot_group": "attribute",
          "range": "string",
          "required": true
        },
        "description": {
          "name": "description",
          "description": "A plan text description of this setting.",
          "title": "Description",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 4,
          "alias": "description",
          "owner": "Setting",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Enum",
            "PermissibleValue",
            "Setting",
            "Extension"
          ],
          "slot_group": "attribute",
          "range": "string"
        }
      },
      "unique_keys": {
        "settings_key": {
          "unique_key_name": "settings_key",
          "unique_key_slots": [
            "schema_id",
            "name"
          ],
          "description": "A setting is uniquely identified by the name key whose value is a regular expression."
        }
      }
    },
    "Rule": {
      "name": "Rule",
      "description": "A rule that executes the change in state of one or more fields (slots).  Each rule has a \"precondition\" expression of constraints one or more fields' values and a postcondition expression stating what the same or other field's values change to.",
      "title": "Rule",
      "from_schema": "https://example.com/DH_LinkML"
    },
    "Extension": {
      "name": "Extension",
      "description": "A list of LinkML attribute-value pairs that are not directly part of the schema's class/slot structure.  Locale information is held here.",
      "title": "Extension",
      "from_schema": "https://example.com/DH_LinkML",
      "slot_usage": {
        "schema_id": {
          "name": "schema_id",
          "title": "Schema",
          "rank": 1,
          "slot_group": "key",
          "range": "Schema"
        },
        "name": {
          "name": "name",
          "title": "Name",
          "rank": 2,
          "slot_group": "key",
          "range": "WhitespaceMinimizedString"
        },
        "value": {
          "name": "value",
          "rank": 3,
          "slot_group": "attribute"
        },
        "description": {
          "name": "description",
          "description": "A plan text description of this extension.  LinkML extensions allow saving any kind of object as a value of a key.",
          "rank": 4,
          "slot_group": "attribute",
          "range": "string"
        }
      },
      "attributes": {
        "schema_id": {
          "name": "schema_id",
          "annotations": {
            "foreign_key": {
              "tag": "foreign_key",
              "value": "Schema.name"
            }
          },
          "title": "Schema",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 1,
          "alias": "schema_id",
          "owner": "Extension",
          "domain_of": [
            "Prefix",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "PermissibleValue",
            "EnumSource",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "Schema",
          "required": true
        },
        "name": {
          "name": "name",
          "title": "Name",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 2,
          "alias": "name",
          "owner": "Extension",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Annotation",
            "Enum",
            "Setting",
            "Extension"
          ],
          "slot_group": "key",
          "range": "WhitespaceMinimizedString",
          "required": true
        },
        "value": {
          "name": "value",
          "title": "Value",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 3,
          "alias": "value",
          "owner": "Extension",
          "domain_of": [
            "Annotation",
            "Setting",
            "Extension"
          ],
          "slot_group": "attribute",
          "range": "string"
        },
        "description": {
          "name": "description",
          "description": "A plan text description of this extension.  LinkML extensions allow saving any kind of object as a value of a key.",
          "title": "Description",
          "from_schema": "https://example.com/DH_LinkML",
          "rank": 4,
          "alias": "description",
          "owner": "Extension",
          "domain_of": [
            "Schema",
            "Class",
            "UniqueKey",
            "Slot",
            "Enum",
            "PermissibleValue",
            "Setting",
            "Extension"
          ],
          "slot_group": "attribute",
          "range": "string"
        }
      },
      "unique_keys": {
        "extension_key": {
          "unique_key_name": "extension_key",
          "unique_key_slots": [
            "schema_id",
            "name"
          ],
          "description": "A key which details each schema's extension."
        }
      }
    },
    "Container": {
      "name": "Container",
      "from_schema": "https://example.com/DH_LinkML",
      "attributes": {
        "Schemas": {
          "name": "Schemas",
          "from_schema": "https://example.com/DH_LinkML",
          "alias": "Schemas",
          "owner": "Container",
          "domain_of": [
            "Container"
          ],
          "range": "Schema",
          "multivalued": true,
          "inlined_as_list": true
        },
        "Prefixes": {
          "name": "Prefixes",
          "from_schema": "https://example.com/DH_LinkML",
          "alias": "Prefixes",
          "owner": "Container",
          "domain_of": [
            "Container"
          ],
          "range": "Prefix",
          "multivalued": true,
          "inlined_as_list": true
        },
        "Settings": {
          "name": "Settings",
          "from_schema": "https://example.com/DH_LinkML",
          "alias": "Settings",
          "owner": "Container",
          "domain_of": [
            "Container"
          ],
          "range": "Setting",
          "multivalued": true,
          "inlined_as_list": true
        },
        "Extensions": {
          "name": "Extensions",
          "from_schema": "https://example.com/DH_LinkML",
          "alias": "Extensions",
          "owner": "Container",
          "domain_of": [
            "Container"
          ],
          "range": "Extension",
          "multivalued": true,
          "inlined_as_list": true
        },
        "Enums": {
          "name": "Enums",
          "from_schema": "https://example.com/DH_LinkML",
          "alias": "Enums",
          "owner": "Container",
          "domain_of": [
            "Container"
          ],
          "range": "Enum",
          "multivalued": true,
          "inlined_as_list": true
        },
        "PermissibleValues": {
          "name": "PermissibleValues",
          "from_schema": "https://example.com/DH_LinkML",
          "alias": "PermissibleValues",
          "owner": "Container",
          "domain_of": [
            "Container"
          ],
          "range": "PermissibleValue",
          "multivalued": true,
          "inlined_as_list": true
        },
        "EnumSources": {
          "name": "EnumSources",
          "from_schema": "https://example.com/DH_LinkML",
          "alias": "EnumSources",
          "owner": "Container",
          "domain_of": [
            "Container"
          ],
          "range": "EnumSource",
          "multivalued": true,
          "inlined_as_list": true
        },
        "Slots": {
          "name": "Slots",
          "from_schema": "https://example.com/DH_LinkML",
          "alias": "Slots",
          "owner": "Container",
          "domain_of": [
            "Container"
          ],
          "range": "Slot",
          "multivalued": true,
          "inlined_as_list": true
        },
        "Annotations": {
          "name": "Annotations",
          "from_schema": "https://example.com/DH_LinkML",
          "alias": "Annotations",
          "owner": "Container",
          "domain_of": [
            "Container"
          ],
          "range": "Annotation",
          "multivalued": true,
          "inlined_as_list": true
        },
        "Classes": {
          "name": "Classes",
          "from_schema": "https://example.com/DH_LinkML",
          "alias": "Classes",
          "owner": "Container",
          "domain_of": [
            "Container"
          ],
          "range": "Class",
          "multivalued": true,
          "inlined_as_list": true
        },
        "UniqueKeys": {
          "name": "UniqueKeys",
          "from_schema": "https://example.com/DH_LinkML",
          "alias": "UniqueKeys",
          "owner": "Container",
          "domain_of": [
            "Container"
          ],
          "range": "UniqueKey",
          "multivalued": true,
          "inlined_as_list": true
        }
      },
      "tree_root": true
    }
  },
  "slots": {
    "schema_id": {
      "name": "schema_id",
      "annotations": {
        "foreign_key": {
          "tag": "foreign_key",
          "value": "Schema.name"
        }
      },
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Prefix",
        "Class",
        "UniqueKey",
        "Slot",
        "Annotation",
        "Enum",
        "PermissibleValue",
        "EnumSource",
        "Setting",
        "Extension"
      ],
      "required": true
    },
    "class_id": {
      "name": "class_id",
      "annotations": {
        "foreign_key": {
          "tag": "foreign_key",
          "value": "Class.name"
        }
      },
      "description": "The class name that this table is linked to.",
      "title": "Class",
      "from_schema": "https://example.com/DH_LinkML",
      "range": "SchemaClassMenu"
    },
    "slot_id": {
      "name": "slot_id",
      "annotations": {
        "foreign_key": {
          "tag": "foreign_key",
          "value": "Slot.name"
        }
      },
      "description": "The class name that this table is linked to.",
      "title": "Slot",
      "from_schema": "https://example.com/DH_LinkML",
      "range": "WhitespaceMinimizedString",
      "required": true
    },
    "enum_id": {
      "name": "enum_id",
      "annotations": {
        "foreign_key": {
          "tag": "foreign_key",
          "value": "Enum.name"
        }
      },
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "PermissibleValue",
        "EnumSource"
      ],
      "required": true
    },
    "name": {
      "name": "name",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Schema",
        "Class",
        "UniqueKey",
        "Slot",
        "Annotation",
        "Enum",
        "Setting",
        "Extension"
      ],
      "required": true
    },
    "id": {
      "name": "id",
      "description": "The unique URI for identifying this LinkML schema.",
      "title": "ID",
      "comments": [
        "Typically the schema can be downloaded from this URI, but currently it is often left as an example URI during schema development. This semantic metadata helps in the comparison of datasets."
      ],
      "examples": [
        {
          "value": "https://example.com/GRDI"
        }
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "identifier": true,
      "domain_of": [
        "Schema"
      ],
      "range": "uri",
      "required": true
    },
    "description": {
      "name": "description",
      "title": "Description",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Schema",
        "Class",
        "UniqueKey",
        "Slot",
        "Enum",
        "PermissibleValue",
        "Setting",
        "Extension"
      ]
    },
    "version": {
      "name": "version",
      "title": "Version",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Schema",
        "Class",
        "Slot"
      ],
      "range": "WhitespaceMinimizedString"
    },
    "in_language": {
      "name": "in_language",
      "description": "This is the default language (ISO 639-1 Code) that the schema’s table, field and picklist (LinkML class, slot, and enumeration) titles, descriptions and other textual items are in.",
      "title": "Default language",
      "comments": [
        "This is often “en” for English."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Schema"
      ],
      "range": "LanguagesMenu"
    },
    "locales": {
      "name": "locales",
      "description": "For multilingual schemas, a list of (ISO 639-1) languages (codes) which translations can be provided for.",
      "title": "Translations",
      "comments": [
        "Language translations are held in the schema’s extensions.locales data structure."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Schema"
      ],
      "range": "LanguagesMenu",
      "multivalued": true
    },
    "default_prefix": {
      "name": "default_prefix",
      "description": "A prefix to assume all classes and slots can be addressed by.",
      "title": "Default prefix",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Schema"
      ],
      "range": "uri",
      "required": true
    },
    "imports": {
      "name": "imports",
      "description": "A list of linkml:[import name] schemas to import and reuse.",
      "title": "Imports",
      "comments": [
        "Currently only the default linkml:types is implemented."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Schema"
      ],
      "range": "WhitespaceMinimizedString",
      "multivalued": true
    },
    "see_also": {
      "name": "see_also",
      "title": "See Also",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Schema",
        "Class"
      ],
      "range": "WhitespaceMinimizedString",
      "multivalued": true
    },
    "prefix": {
      "name": "prefix",
      "description": "The namespace prefix string.",
      "title": "Prefix",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Prefix"
      ],
      "range": "WhitespaceMinimizedString",
      "required": true
    },
    "reference": {
      "name": "reference",
      "description": "The URI the prefix expands to.",
      "title": "Reference",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Prefix"
      ],
      "range": "uri",
      "required": true
    },
    "title": {
      "name": "title",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Class",
        "Slot",
        "Enum",
        "PermissibleValue"
      ],
      "range": "WhitespaceMinimizedString"
    },
    "class_uri": {
      "name": "class_uri",
      "description": "A URI for identifying this table's semantic type.",
      "title": "Table URI",
      "comments": [
        "This semantic metadata helps in the comparison of datasets."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Class"
      ],
      "range": "uri"
    },
    "is_a": {
      "name": "is_a",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Class",
        "PermissibleValue"
      ]
    },
    "tree_root": {
      "name": "tree_root",
      "description": "A boolean indicating whether this is a specification for a top-level data container on which serializations are based.",
      "title": "Root Table",
      "comments": [
        "Only one allowed per Schema. See https://linkml.io/linkml/data/csvs.html"
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Class"
      ],
      "any_of": [
        {
          "range": "boolean"
        },
        {
          "range": "TrueFalseMenu"
        }
      ]
    },
    "class_name": {
      "name": "class_name",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "UniqueKey",
        "Slot",
        "Annotation"
      ],
      "range": "SchemaClassMenu"
    },
    "unique_key_slots": {
      "name": "unique_key_slots",
      "description": "A list of a table’s fields (LinkML class’s slots) that make up this unique key",
      "title": "Unique key slots",
      "comments": [
        "See https://linkml.io/linkml/schemas/constraints.html"
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "UniqueKey"
      ],
      "range": "SchemaSlotMenu",
      "required": true,
      "multivalued": true
    },
    "notes": {
      "name": "notes",
      "title": "Notes",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "UniqueKey",
        "Slot",
        "PermissibleValue"
      ],
      "range": "WhitespaceMinimizedString"
    },
    "slot_type": {
      "name": "slot_type",
      "description": "The type of field (LinkML slot) that this field definition record pertains to: either a schema-level shared field, a schema field reused in a table, or a field only defined in a table.",
      "title": "Type",
      "comments": [
        "In a LinkML schema, a field definition (LinkML slot definition) can exist within one of three contexts:\n1) A field which is defined at the schema level, and which can be shared by more than one table (LinkML class).\n2) A field which a table reuses from its schema's list of fields. Here a table cannot change any schema-defined attributes of the field; it can only add attribute values for empty attributes.  In LinkML such fields and their customized attributes appear in the table's \"slot_usage\" list.\n3) A field which is named only in a given table, and does not appear or inherit any attributes from the schema. (In LinkML such fields appear only in a table’s “attributes” list.)"
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "SchemaSlotTypeMenu",
      "required": true
    },
    "rank": {
      "name": "rank",
      "description": "An integer which sets the order of this field (LinkML slot) relative to the others within a given table.  This is the LinkML rank attribute.",
      "title": "Ordering",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "integer"
    },
    "inlined": {
      "name": "inlined",
      "description": "Within the context of a JSON table representation, whether a complex (non-literal) field’s (LinkML slot’s) content should be represented directly or just represented by a key to another record.",
      "title": "Inlined",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "any_of": [
        {
          "range": "boolean"
        },
        {
          "range": "TrueFalseMenu"
        }
      ]
    },
    "inlined_as_list": {
      "name": "inlined_as_list",
      "description": "Within the context of a JSON table representation, whether a complex (non-literal) field’s (LinkML slot’s) content should be represented directly as a JSON list of items.",
      "title": "Inlined as list",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "any_of": [
        {
          "range": "boolean"
        },
        {
          "range": "TrueFalseMenu"
        }
      ]
    },
    "slot_group": {
      "name": "slot_group",
      "description": "The name of a grouping to place this field (LinkML slot) within during presentation in a table.",
      "title": "Field group",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "SchemaSlotGroupMenu"
    },
    "slot_uri": {
      "name": "slot_uri",
      "description": "A URI for identifying this field’s (LinkML slot’s) semantic type.",
      "title": "Slot URI",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "uri"
    },
    "range": {
      "name": "range",
      "description": "The data type or pick list range or ranges that a field’s (LinkML slot’s) value can be validated by.  If more than one, this appears in the field’s specification as a list of \"any of\" ranges.",
      "title": "Range",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "required": true,
      "multivalued": true,
      "any_of": [
        {
          "range": "SchemaTypeMenu"
        },
        {
          "range": "SchemaClassMenu"
        },
        {
          "range": "SchemaEnumMenu"
        }
      ]
    },
    "unit": {
      "name": "unit",
      "description": "A unit for a numeric field, expressed in the Unified Code for Units of Measure (UCUM, https://ucum.org/) codes.  A UCUM code can be looked up at https://units-of-measurement.org/",
      "title": "Unit",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "WhitespaceMinimizedString"
    },
    "required": {
      "name": "required",
      "description": "A boolean TRUE indicates this field (LinkML slot) is a mandatory data field.",
      "title": "Required",
      "comments": [
        "A mandatory data field will fail validation if empty."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "any_of": [
        {
          "range": "boolean"
        },
        {
          "range": "TrueFalseMenu"
        }
      ]
    },
    "recommended": {
      "name": "recommended",
      "description": "A boolean TRUE indicates this field (LinkML slot) is a recommended data field.",
      "title": "Recommended",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "any_of": [
        {
          "range": "boolean"
        },
        {
          "range": "TrueFalseMenu"
        }
      ]
    },
    "identifier": {
      "name": "identifier",
      "description": "A boolean TRUE indicates this field (LinkML slot) is an identifier such that each of its row values must be unique within the table.  In LinkML, “If a slot is declared as an identifier then it serves as a unique key for members of that class. It can also be used for inlining as a dict in JSON serializations.”",
      "title": "Identifier",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "any_of": [
        {
          "range": "boolean"
        },
        {
          "range": "TrueFalseMenu"
        }
      ]
    },
    "multivalued": {
      "name": "multivalued",
      "description": "A boolean TRUE indicates this field (LinkML slot) can hold more than one values taken from its range.",
      "title": "Multivalued",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "any_of": [
        {
          "range": "boolean"
        },
        {
          "range": "TrueFalseMenu"
        }
      ]
    },
    "minimum_value": {
      "name": "minimum_value",
      "description": "A minimum value which is appropriate for the range data type of the field (LinkML slot).",
      "title": "Minimum value",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "integer"
    },
    "maximum_value": {
      "name": "maximum_value",
      "description": "A maximum value which is appropriate for the range data type of the field (LinkML slot).",
      "title": "Maximum value",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "integer"
    },
    "minimum_cardinality": {
      "name": "minimum_cardinality",
      "description": "For a multivalued field (LinkML slot), a minimum count of values required.",
      "title": "Minimum cardinality",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "integer"
    },
    "maximum_cardinality": {
      "name": "maximum_cardinality",
      "description": "For a multivalued field (LinkML slot), a maximum count of values required.",
      "title": "Maximum cardinality",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "integer"
    },
    "todos": {
      "name": "todos",
      "description": "A delimited list of simple conditionals that pertain to this field (e.g. ‘<={today}’ , or ‘<={some_other_field_name}’.  This field may also include “work in progress” notes.",
      "title": "Conditional",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "WhitespaceMinimizedString",
      "multivalued": true
    },
    "pattern": {
      "name": "pattern",
      "description": "A regular expression pattern used to validate a string field’s (LinkML slot)’s value content.",
      "title": "Pattern",
      "comments": [
        "Regular expressions can begin with ^ to ensure start of string is tested, and $ to ensure up to end is tested."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "WhitespaceMinimizedString"
    },
    "structured_pattern": {
      "name": "structured_pattern",
      "description": "This is a concatenation of regular expression patterns named in the settings table.  Each named expression gets replaced by its regular expression before validating the slot’s string value against it.",
      "title": "Structured pattern",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "WhitespaceMinimizedString"
    },
    "ifabsent": {
      "name": "ifabsent",
      "description": "Specify a default value for a field (LinkML slot) using the syntax shown in the examples.",
      "title": "Default value",
      "examples": [
        {
          "value": "For strings: string(default value)"
        },
        {
          "value": "For integer: int(42)"
        },
        {
          "value": "For float: float(0.5)"
        },
        {
          "value": "For boolean: True"
        },
        {
          "value": "For dates: date(\"2020-01-31\")"
        },
        {
          "value": "For datetime: datetime(\"2020-01-31T12:00:00Z\")"
        }
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "WhitespaceMinimizedString"
    },
    "equals_expression": {
      "name": "equals_expression",
      "description": "Enables inferring (calculating) value based on other field (LinkML slot) values. This is a LinkML-script-processed expression, having the syntax of a python expression.",
      "title": "Calculated value",
      "comments": [
        "See https://linkml.io/linkml/schemas/advanced.html#equals-expression"
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "WhitespaceMinimizedString"
    },
    "aliases": {
      "name": "aliases",
      "description": "A list of other names that slot can be known by.",
      "title": "Aliases",
      "comments": [
        "See https://linkml.io/linkml/schemas/metadata.html#providing-aliases"
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "WhitespaceMinimizedString",
      "multivalued": true
    },
    "comments": {
      "name": "comments",
      "description": "A free text field for adding other comments to guide usage of this field (LinkML slot).",
      "title": "Comments",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "WhitespaceMinimizedString"
    },
    "examples": {
      "name": "examples",
      "description": "A delimited field (LinkML slot) for including examples of string, numeric, date or categorical values.",
      "title": "Examples",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot"
      ],
      "range": "WhitespaceMinimizedString"
    },
    "exact_mappings": {
      "name": "exact_mappings",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Slot",
        "PermissibleValue"
      ],
      "range": "WhitespaceMinimizedString",
      "multivalued": true
    },
    "annotation_type": {
      "name": "annotation_type",
      "description": "A menu of schema element types this annotation could pertain to (Schema, Class, Slot; in future Enumeration …)",
      "title": "Annotation on",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Annotation"
      ],
      "range": "SchemaAnnotationTypeMenu",
      "required": true
    },
    "slot_name": {
      "name": "slot_name",
      "description": "If this annotation is attached to a field (LinkML slot), provide the name of the field.",
      "title": "On field",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Annotation"
      ],
      "range": "SchemaSlotMenu"
    },
    "value": {
      "name": "value",
      "title": "Value",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Annotation",
        "Setting",
        "Extension"
      ],
      "range": "string"
    },
    "enum_uri": {
      "name": "enum_uri",
      "description": "A URI for identifying this pick list’s (LinkML enum) semantic type.",
      "title": "Enum URI",
      "comments": [
        "This semantic metadata helps in the comparison of datasets."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Enum"
      ],
      "range": "uri"
    },
    "inherits": {
      "name": "inherits",
      "description": "Indicates that this menu inherits choices from another menu, and includes or excludes other values (for selection and validation).",
      "title": "Inherits",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "Enum"
      ],
      "range": "SchemaEnumMenu"
    },
    "text": {
      "name": "text",
      "description": "The code (LinkML permissible_value key) for the menu item choice.",
      "title": "Code",
      "comments": [
        "A picklist's codes must be unique.  Whether a picklist label or its code is saved in a data file depends on the data file format.  JSON formatted data files hold codes directly, and thus enforce standardization.  CSV, TSV, XLS, and XLSX data formats receive the choice's label.  This enables saving of multilingual data in language of choice."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "PermissibleValue"
      ],
      "range": "WhitespaceMinimizedString",
      "required": true
    },
    "meaning": {
      "name": "meaning",
      "description": "A URI for identifying this choice's semantic type.",
      "title": "Meaning",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "PermissibleValue"
      ],
      "range": "uri"
    },
    "criteria": {
      "name": "criteria",
      "description": "Whether to include or exclude (minus) the source ontology’s given terms (and their underlying terms, if any).",
      "title": "Criteria",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "EnumSource"
      ],
      "range": "EnumCriteriaMenu",
      "required": true
    },
    "source_ontology": {
      "name": "source_ontology",
      "description": "The URI of the source ontology to trust and fetch terms from.",
      "title": "Source ontology",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "EnumSource"
      ],
      "range": "uri"
    },
    "is_direct": {
      "name": "is_direct",
      "description": "Can the vocabulary source be automatically downloaded and processed, or is a manual process involved?",
      "title": "Directly downloadable",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "EnumSource"
      ],
      "any_of": [
        {
          "range": "boolean"
        },
        {
          "range": "TrueFalseMenu"
        }
      ]
    },
    "source_nodes": {
      "name": "source_nodes",
      "description": "The selection of term nodes (and their underlying terms) to allow or exclude selections from, and to validate data by.",
      "title": "Top level term ids",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "EnumSource"
      ],
      "range": "uriorcurie",
      "multivalued": true
    },
    "include_self": {
      "name": "include_self",
      "description": "Include the listed selection of items (top of term branch or otherwise) as selectable items themselves.",
      "title": "Include top level terms",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "EnumSource"
      ],
      "any_of": [
        {
          "range": "boolean"
        },
        {
          "range": "TrueFalseMenu"
        }
      ]
    },
    "relationship_types": {
      "name": "relationship_types",
      "description": "The relations (usually owl:SubClassOf) that compose the hierarchy of terms.",
      "title": "Relations",
      "from_schema": "https://example.com/DH_LinkML",
      "domain_of": [
        "EnumSource"
      ],
      "range": "WhitespaceMinimizedString",
      "multivalued": true
    }
  },
  "enums": {
    "SchemaSlotTypeMenu": {
      "name": "SchemaSlotTypeMenu",
      "title": "Slot Type",
      "from_schema": "https://example.com/DH_LinkML",
      "permissible_values": {
        "slot": {
          "text": "slot",
          "description": "A field (LinkML slot) that is stored in the schema's field (slot) library.  This field specification is available for customizable reuse in any table (LinkML class).  Note however that its attributes which have values cannot be overriden when reused.",
          "title": "Schema field"
        },
        "slot_usage": {
          "text": "slot_usage",
          "description": "A table field whose name and source attributes come from a schema library field. It can add its own attributes, but cannot overwrite the schema field ones.  (A LinkML schema slot referenced within a class's slot_usage list of slots.)",
          "title": "Table field (from schema)"
        },
        "attribute": {
          "text": "attribute",
          "description": "A table field which is not reused from the schema.  The field can impose its own attribute values.",
          "title": "Table field (independent)"
        }
      }
    },
    "SchemaAnnotationTypeMenu": {
      "name": "SchemaAnnotationTypeMenu",
      "title": "Annotation Type",
      "from_schema": "https://example.com/DH_LinkML",
      "permissible_values": {
        "schema": {
          "text": "schema",
          "title": "Schema"
        },
        "class": {
          "text": "class",
          "title": "Table"
        },
        "slot": {
          "text": "slot",
          "description": "A field (LinkML slot) that is stored in the schema's field (slot) library.  This field specification is available for customizable reuse in any table (LinkML class).  Note however that its attributes which have values cannot be overriden when reused.",
          "title": "Schema field"
        },
        "slot_usage": {
          "text": "slot_usage",
          "description": "A table field whose name and source attributes come from a schema library field. It can add its own attributes, but cannot overwrite the schema field ones.  (A LinkML schema slot referenced within a class's slot_usage list of slots.)",
          "title": "Table field (from schema)"
        },
        "attribute": {
          "text": "attribute",
          "description": "A table field which is not reused from the schema.  The field can impose its own attribute values.",
          "title": "Table field (independent)"
        }
      }
    },
    "EnumCriteriaMenu": {
      "name": "EnumCriteriaMenu",
      "title": "Criteria Menu",
      "from_schema": "https://example.com/DH_LinkML",
      "permissible_values": {
        "include": {
          "text": "include",
          "title": "include"
        },
        "exclude": {
          "text": "exclude",
          "title": "exclude"
        }
      }
    },
    "TrueFalseMenu": {
      "name": "TrueFalseMenu",
      "title": "True/False Menu",
      "from_schema": "https://example.com/DH_LinkML",
      "permissible_values": {
        "TRUE": {
          "text": "TRUE",
          "title": "TRUE"
        },
        "FALSE": {
          "text": "FALSE",
          "title": "FALSE"
        }
      }
    },
    "LanguagesMenu": {
      "name": "LanguagesMenu",
      "title": "Languages Menu",
      "from_schema": "https://example.com/DH_LinkML",
      "permissible_values": {
        "ab": {
          "text": "ab",
          "title": "Abkhazian (ab)"
        },
        "aa": {
          "text": "aa",
          "title": "Afar (aa)"
        },
        "af": {
          "text": "af",
          "title": "Afrikaans (af)"
        },
        "ak": {
          "text": "ak",
          "title": "Akan (ak)"
        },
        "sq": {
          "text": "sq",
          "title": "Albanian (sq)"
        },
        "am": {
          "text": "am",
          "title": "Amharic (am)"
        },
        "ar": {
          "text": "ar",
          "title": "Arabic (ar)"
        },
        "an": {
          "text": "an",
          "title": "Aragonese (an)"
        },
        "hy": {
          "text": "hy",
          "title": "Armenian (hy)"
        },
        "as": {
          "text": "as",
          "title": "Assamese (as)"
        },
        "av": {
          "text": "av",
          "title": "Avaric (av)"
        },
        "ae": {
          "text": "ae",
          "title": "Avestan (ae)"
        },
        "ay": {
          "text": "ay",
          "title": "Aymara (ay)"
        },
        "az": {
          "text": "az",
          "title": "Azerbaijani (az)"
        },
        "bm": {
          "text": "bm",
          "title": "Bambara (bm)"
        },
        "ba": {
          "text": "ba",
          "title": "Bashkir (ba)"
        },
        "eu": {
          "text": "eu",
          "title": "Basque (eu)"
        },
        "be": {
          "text": "be",
          "title": "Belarusian (be)"
        },
        "bn": {
          "text": "bn",
          "title": "Bengali (bn)"
        },
        "bi": {
          "text": "bi",
          "title": "Bislama (bi)"
        },
        "bs": {
          "text": "bs",
          "title": "Bosnian (bs)"
        },
        "br": {
          "text": "br",
          "title": "Breton (br)"
        },
        "bg": {
          "text": "bg",
          "title": "Bulgarian (bg)"
        },
        "my": {
          "text": "my",
          "title": "Burmese (my)"
        },
        "ca": {
          "text": "ca",
          "title": "Catalan, Valencian (ca)"
        },
        "ch": {
          "text": "ch",
          "title": "Chamorro (ch)"
        },
        "ce": {
          "text": "ce",
          "title": "Chechen (ce)"
        },
        "ny": {
          "text": "ny",
          "title": "Chichewa, Chewa, Nyanja (ny)"
        },
        "zh": {
          "text": "zh",
          "title": "Chinese (zh)"
        },
        "cv": {
          "text": "cv",
          "title": "Chuvash (cv)"
        },
        "kw": {
          "text": "kw",
          "title": "Cornish (kw)"
        },
        "co": {
          "text": "co",
          "title": "Corsican (co)"
        },
        "cr": {
          "text": "cr",
          "title": "Cree (cr)"
        },
        "hr": {
          "text": "hr",
          "title": "Croatian (hr)"
        },
        "cs": {
          "text": "cs",
          "title": "Czech (cs)"
        },
        "da": {
          "text": "da",
          "title": "Danish (da)"
        },
        "dv": {
          "text": "dv",
          "title": "Divehi, Dhivehi, Maldivian (dv)"
        },
        "nl": {
          "text": "nl",
          "title": "Dutch, Flemish (nl)"
        },
        "dz": {
          "text": "dz",
          "title": "Dzongkha (dz)"
        },
        "en": {
          "text": "en",
          "title": "English (en)"
        },
        "eo": {
          "text": "eo",
          "title": "Esperanto (eo)"
        },
        "et": {
          "text": "et",
          "title": "Estonian (et)"
        },
        "ee": {
          "text": "ee",
          "title": "Ewe (ee)"
        },
        "fo": {
          "text": "fo",
          "title": "Faroese (fo)"
        },
        "fj": {
          "text": "fj",
          "title": "Fijian (fj)"
        },
        "fi": {
          "text": "fi",
          "title": "Finnish (fi)"
        },
        "fr": {
          "text": "fr",
          "title": "French (fr)"
        },
        "fy": {
          "text": "fy",
          "title": "Western Frisian (fy)"
        },
        "ff": {
          "text": "ff",
          "title": "Fulah (ff)"
        },
        "gd": {
          "text": "gd",
          "title": "Gaelic, Scottish Gaelic (gd)"
        },
        "gl": {
          "text": "gl",
          "title": "Galician (gl)"
        },
        "lg": {
          "text": "lg",
          "title": "Ganda (lg)"
        },
        "ka": {
          "text": "ka",
          "title": "Georgian (ka)"
        },
        "de": {
          "text": "de",
          "title": "German (de)"
        },
        "el": {
          "text": "el",
          "title": "Greek, Modern (1453–) (el)"
        },
        "kl": {
          "text": "kl",
          "title": "Kalaallisut, Greenlandic (kl)"
        },
        "gn": {
          "text": "gn",
          "title": "Guarani (gn)"
        },
        "gu": {
          "text": "gu",
          "title": "Gujarati (gu)"
        },
        "ht": {
          "text": "ht",
          "title": "Haitian, Haitian Creole (ht)"
        },
        "ha": {
          "text": "ha",
          "title": "Hausa (ha)"
        },
        "he": {
          "text": "he",
          "title": "Hebrew (he)"
        },
        "hz": {
          "text": "hz",
          "title": "Herero (hz)"
        },
        "hi": {
          "text": "hi",
          "title": "Hindi (hi)"
        },
        "ho": {
          "text": "ho",
          "title": "Hiri Motu (ho)"
        },
        "hu": {
          "text": "hu",
          "title": "Hungarian (hu)"
        },
        "is": {
          "text": "is",
          "title": "Icelandic (is)"
        },
        "io": {
          "text": "io",
          "title": "Ido (io)"
        },
        "ig": {
          "text": "ig",
          "title": "Igbo (ig)"
        },
        "id": {
          "text": "id",
          "title": "Indonesian (id)"
        },
        "iu": {
          "text": "iu",
          "title": "Inuktitut (iu)"
        },
        "ik": {
          "text": "ik",
          "title": "Inupiaq (ik)"
        },
        "ga": {
          "text": "ga",
          "title": "Irish (ga)"
        },
        "it": {
          "text": "it",
          "title": "Italian (it)"
        },
        "ja": {
          "text": "ja",
          "title": "Japanese (ja)"
        },
        "jv": {
          "text": "jv",
          "title": "Javanese (jv)"
        },
        "kn": {
          "text": "kn",
          "title": "Kannada (kn)"
        },
        "kr": {
          "text": "kr",
          "title": "Kanuri (kr)"
        },
        "ks": {
          "text": "ks",
          "title": "Kashmiri (ks)"
        },
        "kk": {
          "text": "kk",
          "title": "Kazakh (kk)"
        },
        "km": {
          "text": "km",
          "title": "Central Khmer (km)"
        },
        "ki": {
          "text": "ki",
          "title": "Kikuyu, Gikuyu (ki)"
        },
        "rw": {
          "text": "rw",
          "title": "Kinyarwanda (rw)"
        },
        "ky": {
          "text": "ky",
          "title": "Kyrgyz, Kirghiz (ky)"
        },
        "kv": {
          "text": "kv",
          "title": "Komi (kv)"
        },
        "kg": {
          "text": "kg",
          "title": "Kongo (kg)"
        },
        "ko": {
          "text": "ko",
          "title": "Korean (ko)"
        },
        "kj": {
          "text": "kj",
          "title": "Kuanyama, Kwanyama (kj)"
        },
        "ku": {
          "text": "ku",
          "title": "Kurdish (ku)"
        },
        "lo": {
          "text": "lo",
          "title": "Lao (lo)"
        },
        "la": {
          "text": "la",
          "title": "Latin (la)"
        },
        "lv": {
          "text": "lv",
          "title": "Latvian (lv)"
        },
        "li": {
          "text": "li",
          "title": "Limburgan, Limburger, Limburgish (li)"
        },
        "ln": {
          "text": "ln",
          "title": "Lingala (ln)"
        },
        "lt": {
          "text": "lt",
          "title": "Lithuanian (lt)"
        },
        "lu": {
          "text": "lu",
          "title": "Luba-Katanga (lu)"
        },
        "lb": {
          "text": "lb",
          "title": "Luxembourgish, Letzeburgesch (lb)"
        },
        "mk": {
          "text": "mk",
          "title": "Macedonian (mk)"
        },
        "mg": {
          "text": "mg",
          "title": "Malagasy (mg)"
        },
        "ms": {
          "text": "ms",
          "title": "Malay (ms)"
        },
        "ml": {
          "text": "ml",
          "title": "Malayalam (ml)"
        },
        "mt": {
          "text": "mt",
          "title": "Maltese (mt)"
        },
        "gv": {
          "text": "gv",
          "title": "Manx (gv)"
        },
        "mi": {
          "text": "mi",
          "title": "Maori (mi)"
        },
        "mr": {
          "text": "mr",
          "title": "Marathi (mr)"
        },
        "mh": {
          "text": "mh",
          "title": "Marshallese (mh)"
        },
        "mn": {
          "text": "mn",
          "title": "Mongolian (mn)"
        },
        "na": {
          "text": "na",
          "title": "Nauru (na)"
        },
        "nv": {
          "text": "nv",
          "title": "Navajo, Navaho (nv)"
        },
        "nd": {
          "text": "nd",
          "title": "North Ndebele (nd)"
        },
        "nr": {
          "text": "nr",
          "title": "South Ndebele (nr)"
        },
        "ng": {
          "text": "ng",
          "title": "Ndonga (ng)"
        },
        "ne": {
          "text": "ne",
          "title": "Nepali (ne)"
        },
        "no": {
          "text": "no",
          "title": "Norwegian (no)"
        },
        "nb": {
          "text": "nb",
          "title": "Norwegian Bokmål (nb)"
        },
        "nn": {
          "text": "nn",
          "title": "Norwegian Nynorsk (nn)"
        },
        "oc": {
          "text": "oc",
          "title": "Occitan (oc)"
        },
        "oj": {
          "text": "oj",
          "title": "Ojibwa (oj)"
        },
        "or": {
          "text": "or",
          "title": "Oriya (or)"
        },
        "om": {
          "text": "om",
          "title": "Oromo (om)"
        },
        "os": {
          "text": "os",
          "title": "Ossetian, Ossetic (os)"
        },
        "pi": {
          "text": "pi",
          "title": "Pali (pi)"
        },
        "ps": {
          "text": "ps",
          "title": "Pashto, Pushto (ps)"
        },
        "fa": {
          "text": "fa",
          "title": "Persian (fa)"
        },
        "pl": {
          "text": "pl",
          "title": "Polish (pl)"
        },
        "pt": {
          "text": "pt",
          "title": "Portuguese (pt)"
        },
        "pa": {
          "text": "pa",
          "title": "Punjabi, Panjabi (pa)"
        },
        "qu": {
          "text": "qu",
          "title": "Quechua (qu)"
        },
        "ro": {
          "text": "ro",
          "title": "Romanian, Moldavian, Moldovan (ro)"
        },
        "rm": {
          "text": "rm",
          "title": "Romansh (rm)"
        },
        "rn": {
          "text": "rn",
          "title": "Rundi (rn)"
        },
        "ru": {
          "text": "ru",
          "title": "Russian (ru)"
        },
        "se": {
          "text": "se",
          "title": "Northern Sami (se)"
        },
        "sm": {
          "text": "sm",
          "title": "Samoan (sm)"
        },
        "sg": {
          "text": "sg",
          "title": "Sango (sg)"
        },
        "sa": {
          "text": "sa",
          "title": "Sanskrit (sa)"
        },
        "sc": {
          "text": "sc",
          "title": "Sardinian (sc)"
        },
        "sr": {
          "text": "sr",
          "title": "Serbian (sr)"
        },
        "sn": {
          "text": "sn",
          "title": "Shona (sn)"
        },
        "sd": {
          "text": "sd",
          "title": "Sindhi (sd)"
        },
        "si": {
          "text": "si",
          "title": "Sinhala, Sinhalese (si)"
        },
        "sk": {
          "text": "sk",
          "title": "Slovak (sk)"
        },
        "sl": {
          "text": "sl",
          "title": "Slovenian (sl)"
        },
        "so": {
          "text": "so",
          "title": "Somali (so)"
        },
        "st": {
          "text": "st",
          "title": "Southern Sotho (st)"
        },
        "es": {
          "text": "es",
          "title": "Spanish, Castilian (es)"
        },
        "su": {
          "text": "su",
          "title": "Sundanese (su)"
        },
        "sw": {
          "text": "sw",
          "title": "Swahili (sw)"
        },
        "ss": {
          "text": "ss",
          "title": "Swati (ss)"
        },
        "sv": {
          "text": "sv",
          "title": "Swedish (sv)"
        },
        "tl": {
          "text": "tl",
          "title": "Tagalog (tl)"
        },
        "ty": {
          "text": "ty",
          "title": "Tahitian (ty)"
        },
        "tg": {
          "text": "tg",
          "title": "Tajik (tg)"
        },
        "ta": {
          "text": "ta",
          "title": "Tamil (ta)"
        },
        "tt": {
          "text": "tt",
          "title": "Tatar (tt)"
        },
        "te": {
          "text": "te",
          "title": "Telugu (te)"
        },
        "th": {
          "text": "th",
          "title": "Thai (th)"
        },
        "bo": {
          "text": "bo",
          "title": "Tibetan (bo)"
        },
        "ti": {
          "text": "ti",
          "title": "Tigrinya (ti)"
        },
        "to": {
          "text": "to",
          "title": "Tonga (Tonga Islands) (to)"
        },
        "ts": {
          "text": "ts",
          "title": "Tsonga (ts)"
        },
        "tn": {
          "text": "tn",
          "title": "Tswana (tn)"
        },
        "tr": {
          "text": "tr",
          "title": "Turkish (tr)"
        },
        "tk": {
          "text": "tk",
          "title": "Turkmen (tk)"
        },
        "tw": {
          "text": "tw",
          "title": "Twi (tw)"
        },
        "ug": {
          "text": "ug",
          "title": "Uighur, Uyghur (ug)"
        },
        "uk": {
          "text": "uk",
          "title": "Ukrainian (uk)"
        },
        "ur": {
          "text": "ur",
          "title": "Urdu (ur)"
        },
        "uz": {
          "text": "uz",
          "title": "Uzbek (uz)"
        },
        "ve": {
          "text": "ve",
          "title": "Venda (ve)"
        },
        "vi": {
          "text": "vi",
          "title": "Vietnamese (vi)"
        },
        "vo": {
          "text": "vo",
          "title": "Volapük (vo)"
        },
        "wa": {
          "text": "wa",
          "title": "Walloon (wa)"
        },
        "cy": {
          "text": "cy",
          "title": "Welsh (cy)"
        },
        "wo": {
          "text": "wo",
          "title": "Wolof (wo)"
        },
        "xh": {
          "text": "xh",
          "title": "Xhosa (xh)"
        },
        "ii": {
          "text": "ii",
          "title": "Sichuan Yi, Nuosu (ii)"
        },
        "yi": {
          "text": "yi",
          "title": "Yiddish (yi)"
        },
        "yo": {
          "text": "yo",
          "title": "Yoruba (yo)"
        },
        "za": {
          "text": "za",
          "title": "Zhuang, Chuang (za)"
        },
        "zu": {
          "text": "zu",
          "title": "Zulu (zu)"
        }
      }
    }
  },
  "types": {
    "WhitespaceMinimizedString": {
      "name": "WhitespaceMinimizedString",
      "description": "A string that has all whitespace trimmed off of beginning and end, and all internal whitespace segments reduced to single spaces. Whitespace includes #x9 (tab), #xA (linefeed), and #xD (carriage return).",
      "from_schema": "https://example.com/DH_LinkML",
      "typeof": "string",
      "base": "str",
      "uri": "xsd:token"
    },
    "Provenance": {
      "name": "Provenance",
      "description": "A field containing a DataHarmonizer versioning marker. It is issued by DataHarmonizer when validation is applied to a given row of data.",
      "from_schema": "https://example.com/DH_LinkML",
      "typeof": "string",
      "base": "str",
      "uri": "xsd:token"
    },
    "string": {
      "name": "string",
      "description": "A character string",
      "notes": [
        "In RDF serializations, a slot with range of string is treated as a literal or type xsd:string.   If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"string\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "exact_mappings": [
        "schema:Text"
      ],
      "base": "str",
      "uri": "xsd:string"
    },
    "integer": {
      "name": "integer",
      "description": "An integer",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"integer\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "exact_mappings": [
        "schema:Integer"
      ],
      "base": "int",
      "uri": "xsd:integer"
    },
    "boolean": {
      "name": "boolean",
      "description": "A binary (true or false) value",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"boolean\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "exact_mappings": [
        "schema:Boolean"
      ],
      "base": "Bool",
      "uri": "xsd:boolean",
      "repr": "bool"
    },
    "float": {
      "name": "float",
      "description": "A real number that conforms to the xsd:float specification",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"float\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "exact_mappings": [
        "schema:Float"
      ],
      "base": "float",
      "uri": "xsd:float"
    },
    "double": {
      "name": "double",
      "description": "A real number that conforms to the xsd:double specification",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"double\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "close_mappings": [
        "schema:Float"
      ],
      "base": "float",
      "uri": "xsd:double"
    },
    "decimal": {
      "name": "decimal",
      "description": "A real number with arbitrary precision that conforms to the xsd:decimal specification",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"decimal\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "broad_mappings": [
        "schema:Number"
      ],
      "base": "Decimal",
      "uri": "xsd:decimal"
    },
    "time": {
      "name": "time",
      "description": "A time object represents a (local) time of day, independent of any particular day",
      "notes": [
        "URI is dateTime because OWL reasoners do not work with straight date or time",
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"time\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "exact_mappings": [
        "schema:Time"
      ],
      "base": "XSDTime",
      "uri": "xsd:time",
      "repr": "str"
    },
    "date": {
      "name": "date",
      "description": "a date (year, month and day) in an idealized calendar",
      "notes": [
        "URI is dateTime because OWL reasoners don't work with straight date or time",
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"date\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "exact_mappings": [
        "schema:Date"
      ],
      "base": "XSDDate",
      "uri": "xsd:date",
      "repr": "str"
    },
    "datetime": {
      "name": "datetime",
      "description": "The combination of a date and time",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"datetime\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "exact_mappings": [
        "schema:DateTime"
      ],
      "base": "XSDDateTime",
      "uri": "xsd:dateTime",
      "repr": "str"
    },
    "date_or_datetime": {
      "name": "date_or_datetime",
      "description": "Either a date or a datetime",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"date_or_datetime\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "base": "str",
      "uri": "linkml:DateOrDatetime",
      "repr": "str"
    },
    "uriorcurie": {
      "name": "uriorcurie",
      "description": "a URI or a CURIE",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"uriorcurie\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "base": "URIorCURIE",
      "uri": "xsd:anyURI",
      "repr": "str"
    },
    "curie": {
      "name": "curie",
      "conforms_to": "https://www.w3.org/TR/curie/",
      "description": "a compact URI",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"curie\"."
      ],
      "comments": [
        "in RDF serializations this MUST be expanded to a URI",
        "in non-RDF serializations MAY be serialized as the compact representation"
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "base": "Curie",
      "uri": "xsd:string",
      "repr": "str"
    },
    "uri": {
      "name": "uri",
      "conforms_to": "https://www.ietf.org/rfc/rfc3987.txt",
      "description": "a complete URI",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"uri\"."
      ],
      "comments": [
        "in RDF serializations a slot with range of uri is treated as a literal or type xsd:anyURI unless it is an identifier or a reference to an identifier, in which case it is translated directly to a node"
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "close_mappings": [
        "schema:URL"
      ],
      "base": "URI",
      "uri": "xsd:anyURI",
      "repr": "str"
    },
    "ncname": {
      "name": "ncname",
      "description": "Prefix part of CURIE",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"ncname\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "base": "NCName",
      "uri": "xsd:string",
      "repr": "str"
    },
    "objectidentifier": {
      "name": "objectidentifier",
      "description": "A URI or CURIE that represents an object in the model.",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"objectidentifier\"."
      ],
      "comments": [
        "Used for inheritance and type checking"
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "base": "ElementIdentifier",
      "uri": "shex:iri",
      "repr": "str"
    },
    "nodeidentifier": {
      "name": "nodeidentifier",
      "description": "A URI, CURIE or BNODE that represents a node in a model.",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"nodeidentifier\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "base": "NodeIdentifier",
      "uri": "shex:nonLiteral",
      "repr": "str"
    },
    "jsonpointer": {
      "name": "jsonpointer",
      "conforms_to": "https://datatracker.ietf.org/doc/html/rfc6901",
      "description": "A string encoding a JSON Pointer. The value of the string MUST conform to JSON Point syntax and SHOULD dereference to a valid object within the current instance document when encoded in tree form.",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"jsonpointer\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "base": "str",
      "uri": "xsd:string",
      "repr": "str"
    },
    "jsonpath": {
      "name": "jsonpath",
      "conforms_to": "https://www.ietf.org/archive/id/draft-goessner-dispatch-jsonpath-00.html",
      "description": "A string encoding a JSON Path. The value of the string MUST conform to JSON Point syntax and SHOULD dereference to zero or more valid objects within the current instance document when encoded in tree form.",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"jsonpath\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "base": "str",
      "uri": "xsd:string",
      "repr": "str"
    },
    "sparqlpath": {
      "name": "sparqlpath",
      "conforms_to": "https://www.w3.org/TR/sparql11-query/#propertypaths",
      "description": "A string encoding a SPARQL Property Path. The value of the string MUST conform to SPARQL syntax and SHOULD dereference to zero or more valid objects within the current instance document when encoded as RDF.",
      "notes": [
        "If you are authoring schemas in LinkML YAML, the type is referenced with the lower case \"sparqlpath\"."
      ],
      "from_schema": "https://example.com/DH_LinkML",
      "base": "str",
      "uri": "xsd:string",
      "repr": "str"
    }
  },
  "settings": {
    "Title_Case": {
      "setting_key": "Title_Case",
      "setting_value": "(((?<=\\b)[^a-z\\W]\\w*?|[\\W])+)"
    },
    "UPPER_CASE": {
      "setting_key": "UPPER_CASE",
      "setting_value": "[A-Z\\W\\d_]*"
    },
    "lower_case": {
      "setting_key": "lower_case",
      "setting_value": "[a-z\\W\\d_]*"
    }
  },
  "extensions": {},
  "@type": "OrderedDict"
}